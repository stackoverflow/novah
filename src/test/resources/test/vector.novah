module vector

import novah.test

streamTest : Suite
streamTest =
  Test "Vector stream functions" \_ ->
    let vec = [1, 2, 3, 4]
    let stm = Stream.from 1
    let same = Vector.stream vec |> Vector.fromStream
    Vector.fromStream stm `shouldBe` [1]
    same `shouldBe` vec

readersTest : Suite
readersTest =
  Test "Vector reading functions" \_ ->
    let vec = [1, 2, 3, 4]
    (vec ! 2L) `shouldBe` 3
    Vector.nth 2L vec `shouldBe` Some 3
    Vector.first vec `shouldBe` Some 1
    Vector.last vec `shouldBe` Some 4
    Vector.isEmpty vec `shouldBe` false
    Vector.contains 4 vec `shouldBe` true
    count vec `shouldBe` 4L
    (vec ++ [5, 6]) `shouldBe` [1, 2, 3, 4, 5, 6]

writersTest : Suite
writersTest =
  Test "Vector writing functions" \_ ->
    let vec = [1, 2, 3]
    addFirst 4 vec `shouldBe` [4, 1, 2, 3]
    addLast 4 vec `shouldBe` [1, 2, 3, 4]
    removeFirst vec `shouldBe` [2, 3]
    removeLast vec `shouldBe` [1, 2]
    setAt 1L 5 vec `shouldBe` [1, 5, 3]
    updateAt 1L (_ + 1) vec `shouldBe` [1, 3, 3]

traversersTest : Suite
traversersTest =
  Test "Vector traversing functions" \_ ->
    let vec = [1, 2, 3]
    Vector.map (_ + 1) vec `shouldBe` [2, 3, 4]
    Vector.filter isOdd vec `shouldBe` [1, 3]
    Vector.find isOdd vec `shouldBe` Some 1
    Vector.sort [4, 1, 3, 5, 2] `shouldBe` [1, 2, 3, 4, 5]
    Vector.foldl (-) 0 vec `shouldBe` -6
    Vector.foldr (-) 0 vec `shouldBe` 2
    Vector.reduce (+) vec `shouldBe` Some 6
    Vector.flatten [[1, 2], [3, 4], [5, 6]] `shouldBe` [1, 2, 3, 4, 5, 6]
    Vector.flatMap (\x -> [x, x]) vec `shouldBe` [1, 1, 2, 2, 3, 3]
    Vector.reverse vec `shouldBe` [3, 2, 1]

linearTest : Suite
linearTest =
  Test "Linear vector functions" \_ ->
    let vec = [1, 2, 3]
    let lin = Vector.linear vec
    (Vector.linear vec |> Vector.forked) `shouldBe` vec
    (Vector.addFirstLinear 0 lin |> Vector.forked) `shouldBe` [0, 1, 2, 3]
    (Vector.addLastLinear 4 lin |> Vector.forked) `shouldBe` [0, 1, 2, 3, 4]
    (Vector.removeFirstLinear lin |> Vector.forked) `shouldBe` [1, 2, 3, 4]
    (Vector.removeLastLinear lin |> Vector.forked) `shouldBe` [1, 2, 3]
    (Vector.setAtLinear 1L 5 lin |> Vector.forked) `shouldBe` [1, 5, 3]
    count lin `shouldBe` 3L

pub
vectorTests : Vector Suite
vectorTests =
  [ streamTest
  , readersTest
  , writersTest
  , traversersTest
  , linearTest
  ]