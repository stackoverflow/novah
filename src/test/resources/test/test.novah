module test

import novah.linkedList (map, filter, LinkedList(Nil, Cons))

foreign import type java.io.File
foreign import type io.lacuna.bifurcan.Map
foreign import new File(String) as newFile
foreign import File.getName() as fileName
foreign import get File:separator

typealias Opt a = Option a

pub+
type MyList a
  = Niu
  | Kons a (MyList a)

pub
type Id = Id String

pub
baz = map

baz2 = filter

nf : String -> File
nf x =
  newFile x

fname : File -> String
fname f =
  fileName f ++ separator

/**
 * This is my comment
 * it should describe the function
 */
myfun : Int -> String
myfun x =
  let instance vari = x * x
  let other = vari * x
  x + vari + other |> show

typecast : a -> Map String a
typecast typ =
  Map.new ["a" <> typ] as Map String a

/**
 * The badge is a lie.
 */
pub
showBadge : Id -> String
showBadge (Id id) = format "my id is %s" [id]

rec : { age : Int, name : String } -> String
rec {name, age} =
  format "age %i name %s" [show age, name]

fullname : { name : String, lastName : String } -> String
fullname person =
  format "%s %s" [person.name, person.lastName]

foo : (Int -> Boolean) -> List Int -> Int
foo pred list =
  case list of
    [] -> 0
    [x] if pred x -> x
    _ -> -1

bar : String
bar = "asd"

pub
main : Array String -> Unit
main _ =
  foo (_ > 1) [1, 2, 3, 4] |> println