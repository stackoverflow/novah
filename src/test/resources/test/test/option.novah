module test.option

import novah.test

optionTests : Unit
optionTests =
  test "Option reading functions" \_ ->
    Option.some? (Some 1) `shouldBe` true
    Option.none? None `shouldBe` true
    Option.maybe 3 (_ + 1) (Some 1) `shouldBe` 2
    Option.maybe 3 (_ + 1) None `shouldBe` 3
    (Some 1 ?: 0) `shouldBe` 1
    (None ?: 0) `shouldBe` 0
    Option.unwrap (Some "abc") `shouldBe` "abc"
    Option.map (_ ++ "def") (Some "abc") `shouldBe` Some "abcdef"
    Option.toOption null `shouldBe` (None : Option Int)
    Option.toNullable None `shouldBe` (null : Nullable Int)
    (Option.toNullable (Some 3) |> unsafeCast) `shouldBe` 3