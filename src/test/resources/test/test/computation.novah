module test.computation

import novah.computation
import novah.test

#[test: "List computations"]
listComputationTest : Unit -> Unit
listComputationTest () =
  let l = do.list
    for x in [1 .. 4] do
      for y in [2 .. 5] do
        if Math.isEven (x + y) then yield x ; y
  l `shouldBe` [1 ; 3, 1 ; 5, 2 ; 2, 2 ; 4, 3 ; 3, 3 ; 5, 4 ; 2, 4 ; 4]

  let l2 = do.list
    for x in [1 .. 5] do
      let y = 0
      yield y
      yield x
  l2 `shouldBe` [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]

#[test: "Set computations"]
setComputationTest : Unit -> Unit
setComputationTest () =
  let s = do.set
    for x in #{1 .. 4} do
      for y in #{2 .. 5} do
        if Math.isEven (x + y) then yield x ; y
  s `shouldBe` #{1 ; 3, 1 ; 5, 2 ; 2, 2 ; 4, 3 ; 3, 3 ; 5, 4 ; 2, 4 ; 4}

#[test: "Option computations"]
optionComputationTest : Unit -> Unit
optionComputationTest () =
  let opt = do.option
    let! x = Some 3
    let! y = Some 5
    if Math.isEven (x + y) then return x ; y
  opt `shouldBe` Some (3 ; 5)

  let opt2 = do.option
    let! x = Some 4
    let! y = Some 5
    if Math.isEven (x + y) then return x ; y
  opt2 `shouldBe` None

  let opt3 = do.option
    let! x = None
    let! y = Some 5
    if Math.isEven (x + y) then return x ; y
  opt3 `shouldBe` None

#[test: "Result computations"]
resultComputationTest : Unit -> Unit
resultComputationTest () =
  let res = do.result
    let! x = Ok 3 : Result Int Int
    let! y = Ok 5
    return x + y
  res `shouldBe` Ok 8

  let res2 = do.result
    let! x = Err 3
    let! y = Ok 5
    return x + y
  res2 `shouldBe` Err 3