module test.linkedList

import novah.linkedList (::, LinkedList(..))
import novah.linkedList as LinkedList
import novah.test

fv : List a -> LinkedList a
fv = LinkedList.fromList

linkedListTests : Unit
linkedListTests =
  test "List reading functions" \_ ->
    let l = fv [1, 2, 3, 4]
    LinkedList.nth 2 l `shouldBe` Some 3
    LinkedList.head l `shouldBe` Some 1
    LinkedList.tail l `shouldBe` Some (fv [2, 3, 4])
    LinkedList.singleton 5 `shouldBe` (5 :: Nil)
    LinkedList.isEmpty l `shouldBe` false
    LinkedList.isNotEmpty l `shouldBe` true
    (4 `isIn` l) `shouldBe` true
    LinkedList.take 2 l `shouldBe` (1 :: 2 :: Nil)
    LinkedList.drop 2 l `shouldBe` (3 :: 4 :: Nil)
    LinkedList.takeWhile (_ < 3) l `shouldBe` (1 :: 2 :: Nil)
    LinkedList.dropWhile (_ < 3) l `shouldBe` (3 :: 4 :: Nil)
    LinkedList.rangeTo 1 5 `shouldBe` fv [1, 2, 3, 4]
    LinkedList.fromList [1, 2, 3, 4] `shouldBe` (1 :: 2 :: 3 :: 4 :: Nil)
    LinkedList.size l `shouldBe` 4
    (l ++ (5 :: 6 :: Nil)) `shouldBe` LinkedList.rangeTo 1 7

  test "List writing functions" \_ ->
    let l = fv [1, 2, 3]
    (0 :: l) `shouldBe` fv [0, 1, 2, 3]

  test "List traversing functions" \_ ->
    let l = fv [1, 2, 3]
    let revSort {{_}} x y = case compare x y of
      GT -> LT
      LT -> GT
      EQ -> EQ
    LinkedList.map (_ + 1) l `shouldBe` fv [2, 3, 4]
    LinkedList.filter Math.isOdd l `shouldBe` fv [1, 3]
    LinkedList.find Math.isEven l `shouldBe` Some 2
    LinkedList.find (_ == 11) l `shouldBe` None
    LinkedList.sortBy revSort (fv [4, 1, 3, 5, 2]) `shouldBe` fv [5, 4, 3, 2, 1]
    LinkedList.sort (fv [4, 1, 3, 5, 2]) `shouldBe` fv [1, 2, 3, 4, 5]
    LinkedList.foldl (-) 0 l `shouldBe` -6
    LinkedList.foldr (-) 0 l `shouldBe` 2
    LinkedList.reduce (+) l `shouldBe` Some 6
    LinkedList.flatten (fv [fv [1, 2], fv [3, 4], fv [5, 6]]) `shouldBe` fv [1, 2, 3, 4, 5, 6]
    LinkedList.flatMap (\x -> x :: x :: Nil) l `shouldBe` fv [1, 1, 2, 2, 3, 3]
    LinkedList.reverse l `shouldBe` fv [3, 2, 1]