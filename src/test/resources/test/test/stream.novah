module test.stream

import novah.list (toArray)
import novah.stream as Stream
import novah.test

foreign import java.util.stream.Stream

vs : List a -> Stream a
vs = List.stream

streamTests : Unit
streamTests =
  test "Stream functions" \_ ->
    let st = List.stream [1, 2, 3, 4, 5, 6]
    (Stream.empty () |> List.fromStream) `shouldBe` ([] : List Int)
    (Stream.from 1 |> Stream.toArray) `shouldBe` toArray [1]
    let res = st |> Stream.map (_ + 1) |> Stream.filter isOdd |> Stream.limit 2L
    List.fromStream res `shouldBe` [3, 5]

    let st2 = vs [1, 2, 3, 4]
    Stream.size st2 `shouldBe` 4L

    let st3 =
      vs [1, 2, 3, 4, 5, 6, 7]
        |> Stream.flatMap Stream.from
        |> Stream.limit 5L
        |> Stream.skip 2L
    List.fromStream st3 `shouldBe` [3, 4, 5]

    let st4 =
      vs [1, 2, 3, 4, 5, 6, 7, 8]
        |> Stream.takeWhile (_ <= 6)
        |> Stream.dropWhile (_ < 3)
    List.fromStream st4 `shouldBe` [3, 4, 5, 6]

    let res2 = vs [1, 2, 3, 4, 5] |> Stream.reduce (+)
    res2 `shouldBe` Some 15
    let res3 = vs [1, 2, 3] |> Stream.reduceInit (-) 0
    res3 `shouldBe` -6