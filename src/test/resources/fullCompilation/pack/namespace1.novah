module pack.namespace1

typealias Pri = Int

pub
typealias Foo = Pri

fun1 : String -> Int
fun1 x = do
  println x
  42

pub
sayHello : String -> Unit
sayHello name = do
  println "Hello"
  println name

type Show a = Show { show : a -> String }

pub
show : forall a. {{ Show a }} -> a -> String
show {{s}} x = case s of Show ss -> ss.show x

pub instance
showInt : Show Int
showInt = Show { show: (\x -> toString x) : Int -> String }

pub instance
showBool : Show Boolean
showBool = Show { show: (\x -> toString x) : Boolean -> String }

type Option a = Some a | None

showOptionImpl : forall a. {{ Show a }} -> Option a -> String
showOptionImpl {{s}} o = case o of
  Some x -> show x
  None -> "None"

instance
showOption : forall a. {{ Show a }} -> Show (Option a)
showOption {{s}} = Show { show: showOptionImpl {{s}} }

print : forall a. {{ Show a }} -> Option a -> Unit
print {{s}} o = do
  println (show 5)
  println (show false)
  println (show o)

pub
main () = do
  print (Some (Some None))
  ()
