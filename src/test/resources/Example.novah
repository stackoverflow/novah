module Novah.Example
  hiding (maybe, myFun)

import Prelude

import Data.Perhaps
  ( Perhaps
  , fun1, stuff
  )
import Control.Brain as B

type Maybe a
  = Nope
  | Just a

type List a =
  Nil
  | Cons a (List a)

val num = 0x123efa7c

val doub x = 13.87E-12

val x = fn 3 4 5

type stuff
  :: Int
  -> Int
  -> String
val stuff v v2 = case v of
  [ 0 -> "0"
  | 1 -> show v2
  | _ -> "oops" ]

/**
 * Some multi line comment
 * added here
 */
type maybe :: forall a. a -> Int -> Maybe (a -> a)
val maybe def sm = case sm of
  [ Some x -> B.brain x
  | Nope -> def ]

type id :: âˆ€ a. a -> a
val id x = x

// some comment here
val myFun x = case x of
  [ None -> do {
      println "Nothing is true!";
      case 4 of [ x -> x ]
    }
  | Some x -> 9 ]

val ex x =
  let x = 4 in
  x * 6

type doIt :: Unit -> String
val doIt u = do {
  println "not pure";
  map (\x -> do {
    println x;
    x + 1}) (Some 3);
  let f x = x
  and y = f 9 in
  if y >= 2 then do {
    println "big y";
    if x then 1 else 0
  } else do {
    println "small y";
    0
  }
}