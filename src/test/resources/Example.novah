module Novah.Example hiding
  ( stuff
  , maybe
  , id
  )

import Prelude

import Data.Perhaps exposing
  ( Perhaps
  , fun1, stuff
  )
import Control.Brain as B

data Maybe a
  = Nope
  | Just a

data List a =
  Nil
  | Cons a (List a)

num = 0x123efa7c

doub x = 13.87E-12

x = fn 3 4 5

stuff
  :: Int
  -> Int
  -> String
stuff val v2 = case val of
  0 -> "0"
  1 -> show v2
  _ -> "oops"

maybe :: forall a. a -> Maybe (a -> a)
maybe def sm = case sm of
  Some x -> func x
  Nope -> def

id :: âˆ€ a. a -> a
id x = x

myFun x = case x of
  None ->
    println "Nothing is true!"
    0
  Some x -> 9

doIt :: Unit -> String
doIt u =
  println "not pure"
  map (\x ->
    println x
    x 1) (Some 3)
  let x = 12
      y = x 9
  if y == 2
    then
      println "big y"
      1
    else
      println "small y"
      0