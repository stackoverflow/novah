module Novah.Example hiding
  ( maybe
  , myFun
  , end
  , sum
  , sum2
  )

import Prelude

import Data.Perhaps
  ( Perhaps
  , fun1, stuff
  )
import Control.Brain as B
import Some.Module (fun1, Type2) as Mod

type Maybe a
  = Nope
  | Just a

/*
type List a =
  Nil
  | Cons a (List a)
*/

num = 0x123efa7c

doub x = 13.87E-12

x = fn 3 4 5

stuff ::
  Int ->
  Int ->
  String
stuff v v2 = match v {
  0 -> "0"
  1 -> show v2
  _ -> "oops"
}

/**
 * Some multi line comment
 * added here
 */
maybe :: forall a. a -> Int -> Maybe
maybe def sm = match sm {
  Some x -> B.brain x
  Nope -> def
}

id :: âˆ€ a. a -> a
id x = x

sum :: Int -> Int -> Int
sum x y = x + y

sum2 :: Int -> Int -> Int
sum2 = (+)

// some comment here
myFun x = match x {
  None -> do {
    println "Something"
    match 4 { x -> x }
    4
  }
  Some x -> 9
}

ex x =
  let x = 4
  and y = 9 in do {
    sideEffect 0
    x * y
  }

doIt :: Unit -> String
doIt u = do {
  (println
    "not pure")
  map (\x y -> do {
    println x
    x + 1}) (Some 3)
  let f :: forall a. a -> a
  and f x = x
  and y :: Int
  and y = f 9 in
    if y >= 2 then do {
      println "big y"
      if x then 1 else 0
    } else do {
      println "small y"
      0
    }
}

fact :: Int -> Int
fact x =
  if x <= 1
    then x
    else x * fact (x - 1)

end :: String
end = "end"