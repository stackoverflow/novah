// Functions for working with asynchronous computations
// using `java.util.concurrent.CompletableFuture`.
module novah.async

import novah.java as Java
import novah.list as List
import novah.option as Option

foreign import java.lang.Throwable
foreign import java.util.function.Function
foreign import java.util.function.BiFunction
foreign import java.util.concurrent.CompletableFuture
foreign import java.util.concurrent.CompletionStage
foreign import java.util.concurrent.Executor
foreign import java.util.concurrent.TimeoutException
foreign import java.util.concurrent.TimeUnit

// Blocks the future until it returns a result.
pub
get : CompletableFuture a -> a
get fut = fut#get()

// Returns the value inside the future if it's completed,
// or return the default value.
pub
getOr : CompletableFuture a -> a -> a
getOr fut def = fut#getNow(def)

// Blocks the future until it returns a result.
// If no result is returned until the timeout is reached, returns None.
pub
wait : CompletableFuture a -> Int64 -> TimeUnit -> Option a
wait fut time tunit =
  try
    Some fut#get(time, tunit)
  catch
    :? TimeoutException -> None

// If this future is not yet completed, complete it with value.
// Returns true if the future transitioned to a completed state.
pub
complete : CompletableFuture a -> a -> Boolean
complete fut value = fut#complete(value)

// Returns true if this future is completed in any form.
pub
done? : CompletableFuture a -> Boolean
done? fut = fut#isDone()

// Returns true if this future is cancelled.
pub
cancelled? : CompletableFuture a -> Boolean
cancelled? fut = fut#isCancelled()

// Creates a future that will run this function asynchronously.
pub
new : (Unit -> a) -> CompletableFuture a
new fun = CompletableFuture#supplyAsync(Java.supplier fun)

// Creates a future that will run this function asynchronously.
// The function will run in the given executor.
pub
newWith : Executor -> (Unit -> a) -> CompletableFuture a
newWith exe fun = CompletableFuture#supplyAsync(Java.supplier fun, exe)

// Creates a future that will do nothing for the given time.
pub
sleep : Int64 -> TimeUnit -> CompletableFuture Unit
sleep time tunit = new (\_ -> tunit#sleep(time))

// Maps the given function asynchronously taking the result of this future as argument.
pub
map : (a -> b) -> CompletableFuture a -> CompletableFuture b
map fun fut = fut#thenApply(fun as Function Object b)

// Maps the given function asynchronously taking the result of this future as argument.
// Flattens the result to a single future.
pub
flatMap : (a -> CompletableFuture b) -> CompletableFuture a -> CompletableFuture b
flatMap fun fut = fut#thenCompose(fun as Function Object Object)

// Runs the given function asynchronously with the result of both futures, returning a new future.
// The two futures will run independently.
pub
combine : (a -> b -> c) -> CompletableFuture a -> CompletableFuture b -> CompletableFuture c
combine (fun : a -> b -> c) fut other =
  fut#thenCombine(other as CompletionStage b, Java.biFunction fun)

// Creates a single future that will be completed when all the given futures are completed.
pub
all : List (CompletableFuture a) -> CompletableFuture Unit
all futs =
  let arr = (List.toTypedArray CompletableFuture#-class futs) as Array (CompletableFuture a)
  CompletableFuture#allOf(arr) as CompletableFuture Unit

// Creates a single future that will be completed when any the given futures are completed.
pub
any : List (CompletableFuture a) -> CompletableFuture a
any futs =
  let arr = (List.toTypedArray CompletableFuture#-class futs)
  CompletableFuture#anyOf(arr) as CompletableFuture a

// Handles the exception in this future so it doesn't propagate down the chain.
// The function will only be called in case of an exception.
pub
exceptionally : (Throwable -> a) -> CompletableFuture a -> CompletableFuture a
exceptionally fun fut = fut#exceptionally(fun as Function Throwable a)

// Adds a handler to this future.
// This function is similar to `map` but it handles exceptions as well.
pub
handle : (Result a Throwable -> b) -> CompletableFuture a -> CompletableFuture b
handle fun fut =
  let handler res ex =
    case Option.toOption res of
      Some x -> Ok x |> fun
      None -> Err ex |> fun
  fut#handle(Java.biFunction handler as BiFunction Object Throwable b)