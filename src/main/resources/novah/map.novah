/**
 * Functions to work with persistent maps.
 */
module novah.map

foreign import java.lang.StringBuilder
foreign import io.lacuna.bifurcan.Maps
foreign import io.lacuna.bifurcan.IMap
foreign import io.lacuna.bifurcan.IEntry
foreign import novah.Core
foreign import novah.Ref

import novah.java as Java
import novah.option as Option
import novah.list as List

/**
 * Creates a new map with the supplied entries.
 */
pub
new : List (Tuple k v) -> Map k v
new list =
  let lmap = Map#empty()#linear()
  List.forEach list \(Tuple key val) ->
    put key val lmap
    ()
  lmap#forked()

/**
 * Creates a new map which uses the key equality function and the provided hash function, or the default object hash function.
 * This function should always be used to create new maps for types that have equality implementations that differ from its own
 * `equals` function.
 * Note that Novah creates default, sensible `equals` and `hashCode` implementations for every type.
 */
pub
newEq : {{ Equals k }} -> Option (k -> Int64) -> Map k v
newEq {{Equals eq}} hashFn =
  let hash = Option.map Java.toLongFunction hashFn ?: Maps#-`DEFAULT_HASH_CODE`
  Map#new(hash, Java.bipredicate eq)

/**
 * Returns the size of the map.
 * Runtime: O(1)
 */
pub
size : Map k v -> Int64
size m = m#size()

/**
 * Inserts or replaces a new key/value pair in the map.
 * Runtime: ~O(1)
 */
pub
put : k -> v -> Map k v -> Map k v
put key val map = (map as IMap k v)#put(key, val) as Map k v

/**
 * Returns the value under key if it exists.
 * Runtime: ~O(1)
 */
pub
get : k -> Map k v -> Option v
get k map = (map as IMap k v)#get(k) |> Option.fromOptional

/**
 * Returns the value under key if it exists, or the default value.
 * Runtime: ~O(1)
 */
pub
getOr : k -> v -> Map k v -> v
getOr k default map = map#get(k, default)

/**
 * Applies the function to the value represented by the key, updating it.
 * Does nothing if the key is not present.
 * Runtime: ~O(1)
 */
pub
update : k -> (v -> v) -> Map k v -> Map k v
update key fun map =
  if map#contains(key) then
    map#update(key, Java.unaryOperator fun)
  else
    map

/**
 * Applies the function to the value represented by the key, updating it.
 * Inserts the or value if the key is not present.
 * Runtime: ~O(1)
 */
pub
updateOr : k -> (v -> v) -> v -> Map k v -> Map k v
updateOr key fun default map =
  if map#contains(key) then
    map#update(key, Java.unaryOperator fun)
  else
    put key default map

/**
 * Removes the key from this map.
 * Runtime: ~O(1)
 */
pub
remove : k -> Map k v -> Map k v
remove key map = map#remove(key)

/**
 * Returns true if this map contains the key.
 * Runtime: ~O(1)
 */
pub
hasKey? : k -> Map k v -> Boolean
hasKey? key map = map#contains(key)

/**
 * Returns the result of merging the two maps.
 * Repeated keys in the second map will overwrite keys from the first.
 * An alias for `++`.
 */
pub
merge : Map k v -> Map k v -> Map k v
merge m1 m2 = m1#union(m2 as IMap k v)

/**
 * Returns a set of all keys in this map.
 * Runtime: O(1)
 */
pub
keys : Map k v -> Set k
keys map = map#keys()

/**
 * Returns a list of all values in this map.
 */
pub
values : Map k v -> List v
values map = List#from(map#values())

/**
 * Executes the function for every key/value pair in this map
 * Runtime: O(n)
 */
pub
forEach : Map k v -> (k -> v -> Unit) -> Unit
forEach map f =
  Java.forEach map#iterator() \(entry : IEntry k v) -> f entry#key() entry#value()

/**
 * Maps function f over all entries of this map.
 * Runtime: O(n)
 */
pub
mapValues : (k -> v -> v2) -> Map k v -> Map k v2
mapValues f map = map#mapValues(Java.biFunction f)

/**
 * Returns a map of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (k -> v -> Boolean) -> Map k v -> Map k v
filter pred map =
  let lmap = map#linear()
  forEach lmap \k v ->
    if (not (pred k v)) then
      lmap#remove(k)
      ()
  lmap#forked()

pub
foldl : (b -> k -> v -> b) -> b -> Map k v -> b
foldl fun init map =
  let val = Ref#new(init)
  forEach map \k v ->
    val#update(\acc -> fun acc k v)
  val#-val

/**
 * Returns true if the predicate is true for every entry in this map.
 * Runtime: O(n)
 */
pub
all? : (k -> v -> Boolean) -> Map k v -> Boolean
all? pred map = Core#mapEvery(pred, map)

pub instance
concatMap : Concat (Map k v)
concatMap = Concat merge

/**
 * Returns a list containing every key/value pair from this map.
 * Runtime: O(n)
 */
pub
toList : Map k v -> List (Tuple k v)
toList map =
  let lin = []#linear()
  forEach map \k v ->
    addLast (k ; v) lin
    ()
  lin#forked()

pub instance
eqMap : {{ Equals k }} -> {{ Equals v }} -> Equals (Map k v)
eqMap {{Equals eqk}} {{Equals eqv}} = Equals \x y -> Core#equalsMap(x, y, eqk, eqv)

/**
 * Creates a linear (mutable) version of the given map and applies the function to it.
 * Returns a forked (persistent) version of the returned linear map.
 * This function should be used when lots of expensive mutating operations have to be run on a map
 * and can be seen as a builder for the resulting map.
 * All functions that alter maps like `put`, `update`, `remove`, etc.
 * will mutate a linear map.
 * Ex:
 *   withLinear (Map.new ["a" ; 1, "b" ; 2, "c" ; 3]) \map ->
 *     put "d" 4 map
 *     remove "b" map
 *
 *   -> {"a" 1, "c" 3, "d" 4}
 */
pub
withLinear : Map k v -> (Map k v -> b) -> Map k v
withLinear map f =
  let lin = map#linear()
  f lin
  (lin : Map k v)#forked()

/**
 * Creates a map out of a list based on the given function.
 * Runtime: O(n)
 */
pub
associate : (a -> Tuple k v) -> List a -> Map k v
associate fun = List.map fun >> new

showMapp : Show k -> Show v -> Map k v -> String
showMapp (Show shk) (Show shv) m =
  let builder = StringBuilder#new("{")
  let first = Ref#new(true)
  forEach m \k v ->
    if first#-val then first#-val <- false
    else
      builder#append(", ")
      ()
    builder#append(shk k)
    builder#append(": ")
    builder#append(shv v)
    ()
  builder#append("}")
  builder#toString()

pub instance
showMap : {{ Show k }} -> {{ Show v }} -> Show (Map k v)
showMap {{sk}} {{sv}} = Show (showMapp sk sv)