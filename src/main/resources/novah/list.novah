module novah.list

foreign import type java.util.Comparator
foreign import type java.util.stream.Stream
foreign import type io.lacuna.bifurcan.IList
foreign import type novah.Core

foreign import List.linear() as listLinear
foreign import List.forked() as listForked
foreign import List.slice(Int64, Int64) as listSlice
foreign import List.size() as listSize
foreign import List:"of"(Array) as listFromArray
foreign import java.util.Arrays:sort(Array, Comparator) as arraySort
foreign import IList.stream() as listStream
foreign import IList.toArray() as listToArray
foreign import Core:foldList(Function, Object, List)
foreign import Core:findList(Function, List)
foreign import Core:listEvery(Function, List)

import novah.java (toComparator)
import novah.stream as S
import novah.option as O

/**
 * Returns a stream for this list.
 */
pub
stream : List a -> Stream a
stream list = listStream (unsafeCast list)

/**
 * Collects this stream into a list.
 * Runtime: O(n)
 */
pub
fromStream : Stream a -> List a
fromStream st =
  let llist = listLinear []
  S.forEach st \x -> addLast x llist
  listForked llist

/**
 * Runs function f for every element of this list, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : List a -> (a -> b) -> Unit
forEach list f = forEachRange 0L (listSize list) \idx -> f (list ! idx)

/**
 * Maps function f over all elements of this list
 * returning a list of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> List a -> List b
map f list =
  let llist = listLinear []
  forEachRange 0L (listSize list) \idx ->
    addLast (f (list ! idx)) llist
  listForked llist

/**
 * Returns some value at index for this list if it exists or none.
 * This is a safe version of !
 * Runtime: ~O(1)
 */
pub
nth : Int64 -> List a -> Option a
nth index list =
  let len = listSize list
  if index < 0L || index >= len
    then None
    else Some (list ! index)

/**
 * Returns the size of this list.
 * Runtime: O(1)
 */
pub
size : List a -> Int64
size list = listSize list

/**
 * Returns the first element of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
first : List a -> Option a
first list = nth 0L list

/**
 * Returns the last element of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
last : List a -> Option a
last list = nth (listSize list - 1L) list

/**
 * Returns true if this list is empty.
 * Runtime: O(1)
 */
pub
isEmpty : List a -> Boolean
isEmpty list = listSize list == 0L

/**
 * Returns true if this list is not empty.
 * Runtime: O(1)
 */
pub
isNotEmpty : List a -> Boolean
isNotEmpty list = listSize list != 0L

/**
 * Returns a list of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> List a -> List a
filter f list =
  let llist = listLinear []
  forEachRange 0L (listSize list) \idx ->
    let elem = list ! idx
    when (f elem) \_ ->
      addLast elem llist
  listForked llist

/**
 * Returns the first occurrence of elem in this list for which the predicate returns true.
 * Runtime: O(n)
 */
pub
find : (a -> Boolean) -> List a -> Option a
find pred list = findList pred list |> O.fromOptional

/**
 * Sorts this list according to the comparing function.
 */
pub
sortBy : (a -> a -> Ordering) -> List a -> List a
sortBy cmp =
  case _ of
    [] -> []
    [_] as list -> list
    list ->
      let arr = toArray list
      let comp = toComparator cmp
      arraySort arr (unsafeCast comp)
      listFromArray arr

/**
 * Sorts this list according to the element's Ord instance.
 */
pub
sort : {{ Ord a }} -> List a -> List a
sort {{Ord _ ord}} = sortBy ord.compare

/**
 * An alias to `addFirst`.
 * Should be used when using this list as a stack.
 * Runtime: ~O(1)
 */
pub
push : a -> List a -> List a
push = addFirst

/**
 * An alias to `removeFirst`.
 * Should be used when using this list as a stack.
 * Runtime: ~O(1)
 */
pub
pop : List a -> List a
pop = removeFirst

/**
 * Returns true if the element is inside the list.
 * Runtime: O(n)
 */
pub
contains : {{ Equals a }} -> a -> List a -> Boolean
contains {{Equals eq}} elem list =
  case find (\e -> eq.equals e elem) list of
    Some _ -> true
    None -> false

/**
 * Returns the tail of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
tail : List a -> Option (List a)
tail =
  case _ of
    [] -> None
    [_ :: xs] -> Some xs

/**
 * Returns a slice of this list starting at from (inclusive)
 * and ending at to (exclusive).
 * Runtime: ~O(1)
 */
pub
slice : Int64 -> Int64 -> List a -> List a
slice from to list = listSlice list from to

/**
 * Takes the first n elements of this list and returns it.
 * Runtime: ~O(1)
 */
pub
take : Int64 -> List a -> List a
take n = slice 0L n

/**
 * Drops the first n elements of this list and returns it.
 * Runtime: ~O(1)
 */
pub
drop : Int64 -> List a -> List a
drop n list = slice n (listSize list) list

/**
 * Keeps taking elements of this list while the predicate holds.
 * Runtime: O(n)
 */
pub
takeWhile : (a -> Boolean) -> List a -> List a
takeWhile pred list =
  let v = listLinear list
  let res = listLinear []
  while isNotEmpty v && pred (v ! 0L) do
    addLast (v ! 0L) res
    removeFirst v
  listForked res

/**
 * Keeps removing elements from this list while the predicate holds.
 * Runtime: O(n)
 */
pub
dropWhile : (a -> Boolean) -> List a -> List a
dropWhile pred list =
  let v = listLinear list
  while isNotEmpty v && pred (v ! 0L) do
    removeFirst v
  listForked v

/**
 * Reduces this list to a single value according to the reducing function.
 * Goes from the left to the right.
 * Runtime: O(n)
 */
pub
foldl : (b -> a -> b) -> b -> List a -> b
foldl f init list = foldList f init list

/**
 * A specialized version of `foldl` where the first element of the list is used as initial value.
 * Returns none if the list is empty
 * Runtime: O(n)
 */
pub
reduce : (a -> a -> a) -> List a -> Option a
reduce f =
  case _ of
    [] -> None
    [x :: xs] -> Some (foldl f x xs)

/**
 * Reduces this list to a single value according to the reducing function.
 * Goes from the right to the left.
 * Runtime: O(n)
 */
pub
foldr : (a -> b -> b) -> b -> List a -> b
foldr f init = foldl (flip f) init << reverse

/**
 * Flattens a list of lists into a single list by concatenating them together.
 * Runtime: O(n)
 */
pub
flatten : List (List a) -> List a
flatten =
  case _ of
    [] -> []
    [x :: xs] -> foldl (\v1 v2 -> v1 ++ v2) x xs

/**
 * Like map, but the mapping function should return a list.
 * Flattens the result.
 * Runtime: O(n)
 */
pub
flatMap : (a -> List b) -> List a -> List b
flatMap f list = flatten (map f list)

/**
 * Returns a reversed version of this list.
 * Runtime: O(n)
 */
pub
reverse : List a -> List a
reverse list =
  let llist = listLinear []
  forEachRange 0L (listSize list) \i ->
    addFirst (list ! i) llist
  listForked llist

/**
 * Returns true if the predicate is true for every element in this list.
 * Runtime: O(n)
 */
pub
every : (a -> Boolean) -> List a -> Boolean
every pred list = listEvery pred list

/**
 * Converts this list into an array.
 * Runtime: O(n)
 */
pub
toArray : List a -> Array a
toArray list = unsafeCast (listToArray (unsafeCast list))

/**
 * Converts this array into a list.
 * Runtime: O(n)
 */
pub
fromArray : Array a -> List a
fromArray arr = listFromArray arr

/**
 * Creates a linear (mutable) version of the given list and applies the function to it.
 * Returns a forked (persistent) version of the returned linear list.
 * This function should be used when lots of expensive mutating operations have to be run on a list
 * and can be seen as a builder for the resulting list.
 * All functions that alter lists like `addFirst`, `setAt`, `removeLast`, etc.
 * will mutate a linear list.
 * Ex:
 *   withLinear [1, 2, 3] \list ->
 *     addFirst 0 list
 *     addLast 4 list
 *
 *   -> [0, 1, 2, 3, 4]
 */
pub
withLinear : List a -> (List a -> List a) -> List a
withLinear list f = listForked (f (listLinear list))