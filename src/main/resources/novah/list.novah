module novah.list

/**
 * An immutable linked list.
 * A vector should almost always be prefered over this type as vectors make for good linked lists.
 * Most list operations are O(n) like `count`.
 */
pub+
type List a = Nil | Cons a (List a)

/**
 * Appends the element as the new head of the list.
 * An alias to the Cons constructor of a list.
 */
pub
(::) : a -> List a -> List a
(::) = Cons

/**
 * Returns the head of this list if it's not empty.
 */
pub
head : List a -> Option a
head = case _ of
  Nil -> None
  Cons x _ -> Some x

/**
 * Returns the tail of this list if it's not empty.
 */
pub
tail : List a -> Option (List a)
tail = case _ of
  Nil -> None
  Cons _ xs -> Some xs

/**
 * Maps function f over all elements of this List
 * returning a List of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> List a -> List b
map f = case _ of
  Nil -> Nil
  Cons x xs -> f x :: map f xs

/**
 * Runs function f for every element of this list, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : List a -> (a -> b) -> Unit
forEach list f =
  case list of
    Nil -> ()
    Cons x xs -> do
      f x
      forEach xs f

/**
 * Returns a list of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> List a -> List a
filter f = case _ of
  Nil -> Nil
  Cons x xs -> if f x then x :: filter f xs else filter f xs

/**
 * Like `map` but it will flatten the resulting stream.
 */
pub
flatMap : (a -> List b) -> List a -> List b
flatMap f = case _ of
  Nil -> Nil
  Cons x xs -> f x ++ flatMap f xs

countList_ : List a -> Int64
countList_ = case _ of
  Nil -> 0L
  Cons _ xs -> 1L + (countList_ xs)

/**
 * Returns the size of this list.
 * Runtime: O(n)
 */
pub instance
countList : Count (List a)
countList = Count { count: countList_ }

showList_ : Show a -> List a -> String
showList_ (Show s) l =
  let innerShow = case _ of
        Nil -> "Nil"
        Cons x xs -> s.show x ++ " :: " ++ innerShow xs
  in case l of
    Nil -> "Nil"
    (Cons _ _) as list -> "(" ++ innerShow list ++ ")"

pub instance
showList : {{ Show a }} -> Show (List a)
showList {{s}} = Show { show: showList_ s }

eqList_ : Equals a -> List a -> List a -> Boolean
eqList_ ((Equals eq) as equals) = case _, _ of
  Nil, Nil -> true
  Nil, _ -> false
  _, Nil -> false
  Cons x xs, Cons y ys -> eq.equals x y && eqList_ equals xs ys

pub instance
eqList : {{ Equals a }} -> Equals (List a)
eqList {{eq}} = Equals { equals: eqList_ eq }

concatList_ : List a -> List a -> List a
concatList_ l1 l2 =
  let addTo to = case _ of
        Nil -> to
        Cons x xs -> addTo (x :: to) xs
  in addTo Nil l1 |> addTo l2

pub instance
concatList : Concat (List a)
concatList = Concat { concat: concatList_ }

/**
 * Returns a reversed version of this list.
 * Runtime: O(n)
 */
pub
reverse : List a -> List a
reverse list =
  let addTo to = case _ of
        Nil -> to
        Cons x xs -> addTo (x :: to) xs
  in addTo Nil list