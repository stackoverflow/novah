/**
 * Functions to work with persistent lists.
 * They can also be used as queues or stacks.
 * Literal lists can be created using `[]`.
 */
module novah.list

foreign import java.lang.Class
foreign import java.util.Arrays
foreign import java.util.Comparator
foreign import java.util.stream.Stream
foreign import io.lacuna.bifurcan.IList
foreign import io.lacuna.bifurcan.Map
foreign import novah.Core
foreign import novah.Ref

import novah.java (toComparator, intFunction)
import novah.stream as S
import novah.option as O
import novah.math as Math

/**
 * Returns a stream for this list.
 */
pub
stream : List a -> Stream a
stream list = (list as IList a)#stream()

/**
 * Collects this stream into a list.
 * Runtime: O(n)
 */
pub
fromStream : Stream a -> List a
fromStream st =
  let llist = []#linear()
  S.forEach st \x -> addLast x llist
  llist#forked()

/**
 * Runs function f for every element of this list, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : List a -> (a -> b) -> Unit
forEach (list : List a) f =
  forEachRange 0 list#size()#intValue() \idx -> f (list ! idx)

/**
 * Maps function f over all elements of this list
 * returning a list of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> List a -> List b
map f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    addLast (f (list ! idx)) llist
  llist#forked()

/**
 * Maps function f over all elements of this list
 * returning a list of the same size.
 * Also receives the index of the element as a parameter.
 * Runtime: O(n)
 */
pub
mapIndexed : (Int32 -> a -> b) -> List a -> List b
mapIndexed f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    addLast (f idx (list ! idx)) llist
  llist#forked()

/**
 * Returns some value at index for this list if it exists or none.
 * This is a safe version of !
 * Runtime: ~O(1)
 */
pub
nth : Int32 -> List a -> Option a
nth index (list : List a) =
  let len = list#size()#intValue()
  if index < 0 || index >= len
    then None
    else Some (list ! index)

/**
 * Returns the size of this list.
 * Runtime: O(1)
 */
pub
size : List a -> Int32
size (list : List a) =
  list#size()#intValue()

/**
 * Returns the index of the last element of this list or -1 if the list is empty.
 * Runtime: O(1)
 */
pub
lastIndex : List a -> Int32
lastIndex (list : List a) =
  list#size()#intValue() - 1

/**
 * Returns the first element of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
first : List a -> Option a
first list = nth 0 list

/**
 * Returns the last element of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
last : List a -> Option a
last (list : List a) =
  nth (list#size()#intValue() - 1) list

/**
 * Returns true if this list is empty.
 * Runtime: O(1)
 */
pub
isEmpty : List a -> Boolean
isEmpty (list : List a) =
  list#size() == 0L

/**
 * Returns true if this list is not empty.
 * Runtime: O(1)
 */
pub
isNotEmpty : List a -> Boolean
isNotEmpty (list : List a) = list#size() != 0L

/**
 * Converts this list into a typed array.
 * Runtime: O(n)
 */
pub
toTypedArray : Class a -> List a -> Array a
toTypedArray clazz list =
  let maker i = Core#mkArray(clazz, i)
  (list as IList a)#toArray(intFunction maker)

/**
 * Converts this list into an object array.
 * Runtime: O(n)
 */
pub
toArray : List a -> Array Object
toArray list = (list as IList a)#toArray()

/**
 * Converts this array into a list.
 * Runtime: O(n)
 */
pub
fromArray : Array a -> List a
fromArray arr = List#"of"(arr)

/**
 * Returns a list of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> List a -> List a
filter f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    let elem = list ! idx
    if (f elem) then
      addLast elem llist
      ()
  llist#forked()

/**
 * Returns a list of the elements that match the given predicate.
 * Also receives the index of the list as parameter.
 * Runtime: O(n)
 */
pub
filterIndexed : (Int32 -> a -> Boolean) -> List a -> List a
filterIndexed f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    let elem = list ! idx
    if (f idx elem) then
      addLast elem llist
      ()
  llist#forked()

/**
 * Returns a list of the elements that do not match the given predicate.
 * Does the opposite of `filter`.
 * Runtime: O(n)
 */
pub
remove : (a -> Boolean) -> List a -> List a
remove f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    let elem = list ! idx
    if not (f elem) then
      addLast elem llist
      ()
  llist#forked()

/**
 * Returns a list of the elements that does not match the given predicate.
 * Also receives the index of the list as parameter.
 * Runtime: O(n)
 */
pub
removeIndexed : (Int32 -> a -> Boolean) -> List a -> List a
removeIndexed f (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \idx ->
    let elem = list ! idx
    if not (f idx elem) then
      addLast elem llist
      ()
  llist#forked()

/**
 * Returns the first occurrence of elem in this list for which the predicate returns true.
 * Runtime: O(n)
 */
pub
find : (a -> Boolean) -> List a -> Option a
find pred list =
  Core#findList(pred, list) |> O.fromOptional

/**
 * Returns the first index in this list for which the predicate returns true.
 * Runtime: O(n)
 */
pub
findIndex : (a -> Boolean) -> List a -> Option Int32
findIndex pred list =
  let res = Ref#new(None)
  forEachBreak 0 (size list) \i ->
    if list ! i |> pred then
      res#-val <- Some i
      -1
    else 0
  res#-val

/**
 * Sorts this list according to the comparing function.
 */
pub
sortBy : (a -> a -> Ordering) -> List a -> List a
sortBy cmp =
  case _ of
    [] -> []
    [_] as list -> list
    list ->
      let arr = toArray list
      let comp = toComparator cmp
      Arrays#sort(arr, comp as Comparator Object)
      List#"of"(arr) as List a

/**
 * Sorts this list according to the element's Ord instance.
 */
pub
sort : {{ Ord a }} -> List a -> List a
sort {{Ord _ ord}} = sortBy ord.compare

/**
 * An alias to `addFirst`.
 * Should be used when using this list as a stack.
 * Runtime: ~O(1)
 */
pub
push : a -> List a -> List a
push = addFirst

/**
 * An alias to `removeFirst`.
 * Should be used when using this list as a stack.
 * Runtime: ~O(1)
 */
pub
pop : List a -> List a
pop = removeFirst

/**
 * Returns true if the element is inside the list.
 * Runtime: O(n)
 */
pub
contains : {{ Equals a }} -> a -> List a -> Boolean
contains {{Equals eq}} elem list =
  case find (\e -> eq e elem) list of
    Some _ -> true
    None -> false

/**
 * Returns the tail of this list if it's not empty.
 * Runtime: ~O(1)
 */
pub
tail : List a -> Option (List a)
tail =
  case _ of
    [] -> None
    [_ :: xs] -> Some xs

/**
 * Returns a slice of this list starting at from (inclusive)
 * and ending at to (exclusive).
 * Runtime: ~O(1)
 */
pub
slice : Int32 -> Int32 -> List a -> List a
slice (from: Int32) (to : Int32) (list : List a) =
  list#slice(from#longValue(), to#longValue())

/**
 * Takes the first n elements of this list and returns it.
 * Runtime: ~O(1)
 */
pub
take : Int32 -> List a -> List a
take n (list : List a) =
  let actualN = Math.min n list#size()#intValue()
  slice 0 actualN list

/**
 * Drops the first n elements of this list and returns it.
 * Runtime: ~O(1)
 */
pub
drop : Int32 -> List a -> List a
drop n (list : List a) =
  let len = list#size()#intValue()
  let actualN = Math.min n len
  slice actualN len list

/**
 * Keeps taking elements of this list while the predicate holds.
 * Runtime: O(n)
 */
pub
takeWhile : (a -> Boolean) -> List a -> List a
takeWhile pred (list : List a) =
  let v = list#linear()
  let res = []#linear()
  while isNotEmpty v && pred (v ! 0) do
    addLast (v ! 0) res
    removeFirst v
  res#forked()

/**
 * Keeps droping elements from this list while the predicate holds.
 * Runtime: O(n)
 */
pub
dropWhile : (a -> Boolean) -> List a -> List a
dropWhile pred (list : List a) =
  let v = list#linear()
  while isNotEmpty v && pred (v ! 0) do
    removeFirst v
  v#forked()

/**
 * Reduces this list to a single value according to the reducing function.
 * Goes from the left to the right.
 * Runtime: O(n)
 */
pub
foldl : (b -> a -> b) -> b -> List a -> b
foldl f init list = Core#foldList(f, init, list)

/**
 * A specialized version of `foldl` where the first element of the list is used as initial value.
 * Returns none if the list is empty
 * Runtime: O(n)
 */
pub
reduce : (a -> a -> a) -> List a -> Option a
reduce f =
  case _ of
    [] -> None
    [x :: xs] -> Some (foldl f x xs)

/**
 * Reduces this list to a single value according to the reducing function.
 * Goes from the right to the left.
 * Runtime: O(n)
 */
pub
foldr : (a -> b -> b) -> b -> List a -> b
foldr f init = foldl (flip f) init << reverse

/**
 * Flattens a list of lists into a single list by concatenating them together.
 * Runtime: O(n)
 */
pub
flatten : List (List a) -> List a
flatten =
  case _ of
    [] -> []
    [x :: xs] -> foldl (\v1 v2 -> v1 ++ v2) x xs

/**
 * Like map, but the mapping function should return a list.
 * Flattens the result.
 * Runtime: O(n)
 */
pub
flatMap : (a -> List b) -> List a -> List b
flatMap f list = flatten (map f list)

/**
 * Returns a reversed version of this list.
 * Runtime: O(n)
 */
pub
reverse : List a -> List a
reverse (list : List a) =
  let llist = []#linear()
  forEachRange 0 list#size()#intValue() \i ->
    addFirst (list ! i) llist
  llist#forked()

/**
 * Returns true if the predicate is true for every element in this list.
 * Runtime: O(n)
 */
pub
every : (a -> Boolean) -> List a -> Boolean
every pred list =
  Core#listEvery(pred, list)

/**
 * Returns true if the predicate is true for any element in this list.
 * Runtime: O(n)
 */
pub
any : (a -> Boolean) -> List a -> Boolean
any pred list =
  let res = Ref#new(false)
  forEachBreak 0 (size list) \i ->
    if list ! i |> pred
      then
        res#-val <- true
        -1
      else 0
  res#-val

/**
 * Returns the number of elements matching the given predicate.
 * Runtime: O(n)
 */
pub
count : (a -> Boolean) -> List a -> Int32
count pred list =
  let counter = Ref#new(0)
  forEach list \elem ->
    if pred elem then counter#update(_ + 1)
  counter#-val

/**
 * Returns the smallest number in the list, if the list is not empty.
 * Runtime: O(n)
 */
pub
min : {{ NumberOps a }} -> List a -> Option a
min {{NumberOps ops}} =
  reduce (\n n2 -> ops.min n n2)

/**
 * Returns the smallest number in the list, or the default value.
 * Runtime: O(n)
 */
pub
minOr : {{ NumberOps a }} -> a -> List a -> a
minOr {{NumberOps ops}} default list =
  reduce (\n n2 -> ops.min n n2) list ?: default

/**
 * Returns the smallest element in the list according to the
 * given function, if the list is not empty.
 * Runtime: O(n)
 */
pub
minBy : {{ Ord b }} -> (a -> b) -> List a -> Option a
minBy {{_}} fn =
  reduce (\n n2 -> if (fn n) <= (fn n2) then n else n2)

/**
 * Returns the smallest element returned by applying the
 * function to every element in the list, if the list is not empty.
 * Runtime: O(n)
 */
pub
minOf : {{ NumberOps b }} -> (a -> b) -> List a -> Option b
minOf {{NumberOps ops}} fn =
  case _ of
    [] -> None
    [x :: xs] ->
      let val = Ref#new(fn x)
      forEach xs \e ->
        val#-val <- ops.min val#-val (fn e)
      Some val#-val

/**
 * Returns the biggest number in the list, if the list is not empty.
 * Runtime: O(n)
 */
pub
max : {{ NumberOps a }} -> List a -> Option a
max {{NumberOps ops}} = reduce (\n n2 -> ops.max n n2)

/**
 * Returns the biggest number in the list, or the default value.
 * Runtime: O(n)
 */
pub
maxOr : {{ NumberOps a }} -> a -> List a -> a
maxOr {{NumberOps ops}} default list =
  reduce (\n n2 -> ops.max n n2) list ?: default

/**
 * Returns the biggest element in the list according to the
 * given function, if the list is not empty.
 * Runtime: O(n)
 */
pub
maxBy : {{ Ord b }} -> (a -> b) -> List a -> Option a
maxBy {{_}} fn =
  reduce (\n n2 -> if (fn n) >= (fn n2) then n else n2)

/**
 * Returns the biggest element returned by applying the
 * function to every element in the list, if the list is not empty.
 * Runtime: O(n)
 */
pub
maxOf : {{ NumberOps b }} -> (a -> b) -> List a -> Option b
maxOf {{NumberOps ops}} fn =
  case _ of
    [] -> None
    [x :: xs] ->
      let val = Ref#new(fn x)
      forEach xs \e ->
        val#-val <- ops.max val#-val (fn e)
      Some val#-val

/**
 * Returns the sum of all elements in this list.
 * Runtime: O(n)
 */
pub
sum : {{ Plus a }} -> {{ NumberOps a }} -> List a -> a
sum {{Plus plus}} {{NumberOps ops}} =
  foldl plus ops.zero

/**
 * Returns the sum of all elements by first applying the
 * function to every element in this list.
 * Runtime: O(n)
 */
pub
sumBy : {{ Plus b }} -> {{ NumberOps b }} -> (a -> b) -> List a -> b
sumBy {{Plus plus}} {{NumberOps ops}} fn =
  foldl (\acc x -> plus acc (fn x)) ops.zero

/**
 * Converts this byte array to a list of bytes.
 * Runtime: O(n)
 */
pub
fromByteArray : ByteArray -> List Byte
fromByteArray arr = Core#fromByteArray(arr)

/**
 * Converts this int16 array to a list of int16s.
 * Runtime: O(n)
 */
pub
fromInt16Array : Int16Array -> List Int16
fromInt16Array arr = Core#fromInt16Array(arr)

/**
 * Converts this int array to a list of ints.
 * Runtime: O(n)
 */
pub
fromInt32Array : Int32Array -> List Int32
fromInt32Array arr = Core#fromInt32Array(arr)

/**
 * Converts this int64 array to a list of int64s.
 * Runtime: O(n)
 */
pub
fromInt64Array : Int64Array -> List Int64
fromInt64Array arr = Core#fromInt64Array(arr)

/**
 * Converts this float32 array to a list of float32s.
 * Runtime: O(n)
 */
pub
fromFloat32Array : Float32Array -> List Float32
fromFloat32Array arr = Core#fromFloat32Array(arr)

/**
 * Converts this float64 array to a list of float64s.
 * Runtime: O(n)
 */
pub
fromFloat64Array : Float64Array -> List Float64
fromFloat64Array arr = Core#fromFloat64Array(arr)

/**
 * Converts this boolean array to a list of booleans.
 * Runtime: O(n)
 */
pub
fromBooleanArray : BooleanArray -> List Boolean
fromBooleanArray arr = Core#fromBooleanArray(arr)

/**
 * Converts this char array to a list of chars.
 * Runtime: O(n)
 */
pub
fromCharArray : CharArray -> List Char
fromCharArray arr = Core#fromCharArray(arr)

/**
 * Converts this list of bytes to a byte array.
 * Runtime: O(n)
 */
pub
toByteArray : List Byte -> ByteArray
toByteArray list = Core#toByteArray(list)

/**
 * Converts this list of int16s to a int16 array.
 * Runtime: O(n)
 */
pub
toInt16Array : List Int16 -> Int16Array
toInt16Array list = Core#toInt16Array(list)

/**
 * Converts this list of ints to a int array.
 * Runtime: O(n)
 */
pub
toInt32Array : List Int32 -> Int32Array
toInt32Array list = Core#toInt32Array(list)

/**
 * Converts this list of int64s to a int64 array.
 * Runtime: O(n)
 */
pub
toInt64Array : List Int64 -> Int64Array
toInt64Array list = Core#toInt64Array(list)

/**
 * Converts this list of float32s to a float32 array.
 * Runtime: O(n)
 */
pub
toFloat32Array : List Float32 -> Float32Array
toFloat32Array list = Core#toFloat32Array(list)

/**
 * Converts this list of float64s to a float64 array.
 * Runtime: O(n)
 */
pub
toFloat64Array : List Float64 -> Float64Array
toFloat64Array list = Core#toFloat64Array(list)

/**
 * Converts this list of booleans to a boolean array.
 * Runtime: O(n)
 */
pub
toBooleanArray : List Boolean -> BooleanArray
toBooleanArray list = Core#toBooleanArray(list)

/**
 * Converts this list of chars to a char array.
 * Runtime: O(n)
 */
pub
toCharArray : List Char -> CharArray
toCharArray list = Core#toCharArray(list)

/**
 * Groups the elements of the list according
 * to the the function.
 * Ex:
 * ```novah
 * groupBy isOdd [1, 2, 3, 4, 5, 6]
 * // => { true: [1, 3, 5], false: [2, 4, 6] }
 * ```
 */
pub
groupBy : (a -> b) -> List a -> Map b (List a)
groupBy f list =
  let m = Map#empty()#linear()
  let grouper elem =
    let key = f elem
    let entry = m#get(key, [])
    m#put(key, addLast elem entry)
  
  forEach list grouper
  m#forked()

/**
 * Returns the list partitioned in lists of size n and going forward by step.
 * Ex:
 * ```novah
 * partitionStep 3L 2L [1, 2, 3, 4, 5, 6, 7, 8]
 * // => [[1, 2, 3], [3, 4, 5], [5, 6, 7]]
 * ```
 */
pub
partitionStep : Int32 -> Int32 -> List a -> List (List a)
partitionStep n step list =
  let go listt acc =
    if size listt < n then
      acc
    else
      let prefix = take n listt
      go (drop step listt) (addLast prefix acc)

  go list []

/**
 * Returns the list partitioned in lists of size n and going forward by step.
 * May include sub lists smaller than n if there's some leftovers.
 * Ex:
 * ```novah
 * partitionAllStep 3L 2L [1, 2, 3, 4, 5, 6, 7, 8]
 * // => [[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8]]
 * ```
 */
pub
partitionAllStep : Int32 -> Int32 -> List a -> List (List a)
partitionAllStep n step list =
  let go listt acc =
    if isEmpty listt then
      acc
    else
      let prefix = take n listt
      go (drop step listt) (addLast prefix acc)

  go list []

/**
 * Returns the list partitioned in lists of size n.
 * Ex:
 * ```novah
 * partition 3L [1, 2, 3, 4, 5, 6, 7, 8]
 * // => [[1, 2, 3], [4, 5, 6]]
 * ```
 */
pub
partition : Int32 -> List a -> List (List a)
partition n =
  partitionStep n n

/**
 * Returns the list partitioned in lists of size n.
 * May include sub lists smaller than n if there's some leftovers.
 * Ex:
 * ```novah
 * partitionAll 3L [1, 2, 3, 4, 5, 6, 7, 8]
 * // => [[1, 2, 3], [4, 5, 6], [7, 8]]
 * ```
 */
pub
partitionAll : Int32 -> List a -> List (List a)
partitionAll n =
  partitionAllStep n n

/**
 * Returns a list consisting of the given element repeated n times.
 * Runtime: O(n)
 */
pub
repeat : Int32 -> a -> List a
repeat n x =
  let lin = []#linear()
  forEachRange 0 n \_ ->
    addLast x lin
  lin#forked()

/**
 * Returns a list of all the indices from the input list.
 * Ex:
 * ```novah
 * indices ["a", "b", "c"] // => [0, 1, 2]
 * ```
 */
pub
indices : List a -> List Int32
indices list =
  0 .. (size list)

/**
 * Zips the two lists together.
 * The resulting list will be as big as the smallest one.
 * Ex:
 * ```novah
 * zip [1, 2, 3, 4, 5] ["a", "b", "c"]
 * // => [1 <> "a", 2 <> "b", 3 <> "c"]
 * ```
 * Runtime: O(n)
 */
pub
zip : List a -> List b -> List (Tuple a b)
zip l1 l2 =
  let length = if size l1 > size l2 then size l2 else size l1
  let lin = []#linear()
  forEachRange 0 length \i ->
    addLast ((l1 ! i) <> (l2 ! i)) lin
  lin#forked()

/**
 * Zips the two lists together according to the function.
 * The resulting list will be as big as the smallest one.
 * Ex:
 * ```novah
 * zipWith (+) [1, 2, 3, 4, 5] [10, 11, 12]
 * // => [11, 13, 15]
 * ```
 * Runtime: O(n)
 */
pub
zipWith : (a -> b -> c) -> List a -> List b -> List c
zipWith fun l1 l2 =
  let length = if size l1 > size l2 then size l2 else size l1
  let lin = []#linear()
  forEachRange 0 length \i ->
    addLast (fun (l1 ! i) (l2 ! i)) lin
  lin#forked()

/**
 * Unzips a list into two lists.
 * The opposite of `zip`.
 * Ex:
 * ```novah
 * unzip [1 <> "a", 2 <> "b", 3 <> "c"]
 * // => [1, 2, 3, 4, 5] <> ["a", "b", "c"]
 * ```
 * Runtime: O(n)
 */
pub
unzip : List (Tuple a b) -> Tuple (List a) (List b)
unzip list =
  let lin = []#linear()
  let lin2 = []#linear()
  forEach list \(Tuple x x2) ->
    addLast x lin
    addLast x2 lin2
  lin#forked() <> lin2#forked()

/**
 * Creates a linear (mutable) version of the given list and applies the function to it.
 * Returns a forked (persistent) version of the returned linear list.
 * This function should be used when lots of expensive mutating operations have to be run on a list
 * and can be seen as a builder for the resulting list.
 * All functions that alter lists like `addFirst`, `setAt`, `removeLast`, etc.
 * will mutate a linear list.
 * Ex:
 *   withLinear [1, 2, 3] \list ->
 *     addFirst 0 list
 *     addLast 4 list
 *
 *   -> [0, 1, 2, 3, 4]
 */
pub
withLinear : List a -> (List a -> b) -> List a
withLinear (list : List a) f =
  let lin = list#linear()
  f lin
  (lin : List a)#forked()