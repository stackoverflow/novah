// Functions for Java interoperability.
module novah.java

foreign import java.lang.AssertionError
foreign import java.lang.Error
foreign import java.lang.Class
foreign import java.lang.Runnable
foreign import java.lang.System
foreign import java.util.Iterator
foreign import java.util.Comparator
foreign import java.util.concurrent.Callable
foreign import java.util.function.Consumer
foreign import java.util.function.Predicate
foreign import java.util.function.BiPredicate
foreign import java.util.function.BiFunction
foreign import java.util.function.BinaryOperator
foreign import java.util.function.Supplier
foreign import java.util.function.UnaryOperator
foreign import java.util.function.IntFunction
foreign import java.util.function.ToLongFunction
foreign import java.util.function.ToIntFunction
foreign import novah.Core

// Returns the Java class of this object.
pub
class : a -> Class a
class obj = (obj as Object)#getClass() as Class a

// Returns the hash code for this value using
// the native Java `hashCode` method of x.
pub
hashCode : a -> Int32
hashCode x = (x as Object)#hashCode()

// Returns true if x is equals y using
// the native Java `equals` method of x.
pub
equals : a -> a -> Boolean
equals x y = (x as Object)#equals(y as Object)

// Returns true if the given object is an instance of the class.
pub
isInstance : a -> Class b -> Boolean
isInstance o clazz = clazz#isInstance(o as Object)

// Returns true if clazz1 is a superclass or superinterface of class2.
pub
assignableFrom : Class a -> Class b -> Boolean
assignableFrom clazz1 clazz2 = clazz1#isAssignableFrom(clazz2 as Class Object)

// Throws an assertion error if the condition is false.
pub
assert : Boolean -> String -> Unit
assert cond msg =
  if cond then
    ()
  else
    throw AssertionError#new(format "Assert failed: %s" [msg] as Object)

// Throws an error with the given message that should not be caught
pub
error : String -> a
error msg = throw Error#new(msg)

// Executes the function for each value in this iterator.
// Runtime: O(n)
pub
forEach : Iterator a -> (a -> Unit) -> Unit
forEach it fun =
  while it#hasNext() do
    fun it#next()

// Terminates the currently running JVM with the given status.
// A status different from 0 indicates abnormal termination.
pub
exit : Int32 -> Unit
exit status = System#exit(status)

// Returns a `java.util.Comparator` based on this ordering function.
pub
toComparator : (a -> a -> Ordering) -> Comparator a
toComparator cmp =
  let comp x y =
    case cmp x y of
      LT -> -1
      EQ -> 0
      GT -> 1
  Core#makeComparator(comp)

// Creates a `java.util.function.Consumer` out of this function.
pub
consumer : (a -> Unit) -> Consumer a
consumer f = Core#makeConsumer(f)

// Creates a `java.lang.Runnable` out of this function, ignoring the result.
pub
runnable : (Unit -> Unit) -> Runnable
runnable f = Core#makeRunnable(f)

// Creates a `java.util.concurrent.Callable` out of this function.
pub
callable : (Unit -> a) -> Callable a
callable f = Core#makeCallable(f)

// Creates a `java.util.function.Supplier` out of this function.
pub
supplier : (Unit -> a) -> Supplier a
supplier f = Core#makeSupplier(f)

// Creates a `java.util.function.Predicate` out of this function.
pub
predicate : (a -> Boolean) -> Predicate a
predicate f = Core#makePredicate(f)

// Creates a `java.util.function.BiPredicate` out of this function.
pub
bipredicate : (a -> b -> Boolean) -> BiPredicate a b
bipredicate f = Core#makeBiPredicate(f)

// Creates a `java.util.function.ToLongFunction` out of this function.
pub
toLongFunction : (a -> Int64) -> ToLongFunction a
toLongFunction f = Core#makeToLongFunction(f)

// Creates a `java.util.function.ToIntFunction` out of this function.
pub
toIntFunction : (a -> Int32) -> ToIntFunction a
toIntFunction f = Core#makeToIntFunction(f)

// Creates a `java.util.function.IntFunction` out of this function.
pub
intFunction : (Int32 -> a) -> IntFunction a
intFunction f = Core#makeIntFunction(f)

// Creates a `java.util.function.BinaryOperator` out of this function.
pub
binaryOperator : (a -> a -> a) -> BinaryOperator a
binaryOperator f = Core#makeBinaryOperator(f)

// Creates a `java.util.function.UnaryOperator` out of this function.
pub
unaryOperator : (a -> a) -> UnaryOperator a
unaryOperator f = Core#makeUnaryOperator(f)

// Creates a `java.util.function.BiFunction` out of this function.
pub
biFunction : (a -> b -> c) -> BiFunction a b c
biFunction f = Core#makeBiFunction(f)