module novah.array

foreign import type java.util.Arrays
foreign import type java.util.Comparator
foreign import type java.util.stream.Stream
foreign import type novah.Core

import novah.java (toComparator)
import novah.option as Option
import novah.stream as Stream

/**
 * Returns a stream for this array.
 */
pub
stream : Array a -> Stream a
stream arr = Arrays#stream(arr)

/**
 * Collects this stream into an array.
 */
pub
fromStream : Stream a -> Array a
fromStream = Stream.toArray

/**
 * Returns some value at index for this array if it exists or none.
 * This is a safe version of `arrayGet`.
 * Runtime: O(1)
 */
pub
nth : Int -> Array a -> Option a
nth index arr =
  let len = Core#getArrayLength(arr)
  if index < 0 || index >= len
    then None
    else Some (aget index arr)

/**
 * Returns the size of this array.
 * Runtime: O(1)
 */
pub
size : Array a -> Int32
size arr = Core#getArrayLength(arr)

/**
 * Returns true if the array is empty.
 * Runtime: O(1)
 */
pub
isEmpty : Array a -> Boolean
isEmpty arr = Core#getArrayLength(arr) == 0

/**
 * Returns true if the array is not empty.
 * Runtime: O(1)
 */
pub
isNotEmpty : Array a -> Boolean
isNotEmpty arr = Core#getArrayLength(arr) != 0

/**
 * Returns the first occurrence of elem in the array for which the predicate returns true.
 * Runtime: O(n)
 */
pub
find : (a -> Boolean) -> Array a -> Option a
find pred arr =
  let atm = atom None
  forEachBreak 0L (int64 Core#getArrayLength(arr)) \i ->
    let elem = aget (int i) arr
    if pred elem
      then
        reset (Some elem) atm
        -1
      else 0
  deref atm

/**
 * Returns true if the element is inside the array.
 * Runtime: O(n)
 */
pub
contains : {{ Equals a }} -> a -> Array a -> Boolean
contains {{Equals eq}} elem arr = find (\x -> eq.equals x elem) arr |> Option.isSome

/**
 * Runs function f for every element of this array, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : Array a -> (a -> b) -> Unit
forEach arr f =
  forEachRange 0L (int64 Core#getArrayLength(arr)) \idx ->
    f (aget (int idx) arr)

/**
 * Maps function f over all elements of this array
 * returning an array of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> Array a -> Array b
map f arr =
  let len = Core#getArrayLength(arr)
  let res = objectArray len as Array b
  forEachRange 0L (int64 len) \idx ->
    let i = int idx
    aset i (f (aget i arr)) res
  res

/**
 * Returns an array of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> Array a -> Array a
filter f arr = stream arr |> Stream.filter f |> fromStream

/**
 * Sorts this array in place according to the comparing function.
 */
pub
sortBy : (a -> a -> Ordering) -> Array a -> Unit
sortBy cmp arr =
  let comp = toComparator cmp
  Arrays#sort(arr, comp as Comparator Object)

/**
 * Sorts this array in place according to the elements Ord instance.
 */
pub
sort : {{ Ord a }} -> Array a -> Unit
sort {{Ord _ ord}} arr = sortBy ord.compare arr

/**
 * Returns a new array with the same elements in the reverse order of the input array.
 * Runtime: O(n)
 */
pub
reverse : Array a -> Array a
reverse arr =
  let len = Core#getArrayLength(arr) |> int64
  let res = objectArray (int len) as Array a
  forEachRange 0L len \idx ->
    let i = int (len - idx - 1L)
    let elem = aget (int idx) arr
    aset i elem res
  res

/**
 * Reverses this array in place.
 * Runtime: O(n/2)
 */
pub
reversed : Array a -> Unit
reversed arr =
  let len = Core#getArrayLength(arr)
  forEachRange 0L (len / 2 |> int64) \ii ->
    let i = int ii
    let temp = aget i arr
    aset i (aget (len - i - 1) arr) arr
    aset (len - i - 1) temp arr

/**
 * Creates a byte array of the specified size.
 */
pub
byteArray : Int -> Array Byte
byteArray len = Core#mkByteArray(len)

/**
 * Creates a int16 array of the specified size.
 */
pub
int16Array : Int -> Array Int16
int16Array len = Core#mkInt16Array(len)

/**
 * Creates a int32 array of the specified size.
 */
pub
intArray : Int -> Array Int32
intArray len = Core#mkInt32Array(len)

/**
 * Creates a int64 array of the specified size.
 */
pub
int64Array : Int -> Array Int64
int64Array len = Core#mkInt64Array(len)

/**
 * Creates a float32 array of the specified size.
 */
pub
float32Array : Int -> Array Float32
float32Array len = Core#mkFloat32Array(len)

/**
 * Creates a float64 array of the specified size.
 */
pub
floatArray : Int -> Array Float64
floatArray len = Core#mkFloat64Array(len)

/**
 * Creates a char array of the specified size.
 */
pub
charArray : Int -> Array Char
charArray len = Core#mkCharArray(len)

/**
 * Creates a boolean array of the specified size.
 */
pub
booleanArray : Int -> Array Boolean
booleanArray len = Core#mkBooleanArray(len)

/**
 * Creates an Object array of the specified size.
 */
pub
objectArray : Int -> Array Object
objectArray len = Core#mkObjectArray(len)