// Functions for creating and manipulating BigIntegers
module novah.bigint

foreign import java.lang.ArithmeticException

// Returns a new BigInteger represented by this int64
pub
fromInt64 : Int64 -> BigInteger
fromInt64 n = BigInteger#valueOf(n)

// Returns a new BigInteger represented by this int
pub
fromInt : Int -> BigInteger
fromInt n = BigInteger#valueOf(n#longValue())

// Returns a new BigInteger represented by this string
pub
fromString : String -> BigInteger
fromString str = BigInteger#new(str)

// Returns a new BigInteger represented by this string
// in the specified radix
pub
fromStringRadix : String -> Int32 -> BigInteger
fromStringRadix str radix = BigInteger#new(str, radix)

// Returns a new BigInteger whose value is -this
pub
negate : BigInteger -> BigInteger
negate i = i#negate()

// Returns a BigInteger whose value is this ^ exponent
pub
pow : Int32 -> BigInteger -> BigInteger
pow exp i = i#pow(exp)

// Returns the square root of this BigInteger
pub
sqrt : BigInteger -> BigInteger
sqrt i = i#sqrt()

// Returns a byte representing this BigInteger if it fits
pub
toByte : BigInteger -> Option Byte
toByte i =
  try
    Some i#byteValueExact()
  catch
    :? ArithmeticException -> None

// Returns an int16 representing this BigInteger if it fits
pub
toInt16 : BigInteger -> Option Int16
toInt16 i =
  try
    Some i#shortValueExact()
  catch
    :? ArithmeticException -> None

// Returns an int representing this BigInteger if it fits
pub
toInt : BigInteger -> Option Int32
toInt i =
  try
    Some i#intValueExact()
  catch
    :? ArithmeticException -> None

// Returns an int64 representing this BigInteger if it fits
pub
toInt64 : BigInteger -> Option Int64
toInt64 i =
  try
    Some i#longValueExact()
  catch
    :? ArithmeticException -> None