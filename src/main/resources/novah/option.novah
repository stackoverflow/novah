module novah.option

foreign import java.lang.AssertionError
foreign import java.util.Optional

/**
 * Maps a function over this option if it has a value.
 * Runtime: O(1)
 */
pub
map : (a -> b) -> Option a -> Option b
map f =
  case _ of
    Some x -> Some (f x)
    None -> None

/**
 * Takes a default value, a function and an option
 * and returns the result of the function applied to this option's value
 * or the default value if the option is empty.
 */
pub
maybe : b -> (a -> b) -> Option a -> b
maybe def f =
  case _ of
    Some x -> f x
    None -> def

/**
 * Returns true if this option contains a value.
 */
pub
isSome : Option a -> Boolean
isSome =
  case _ of
    Some _ -> true
    None -> false

/**
 * Returns true if this option *doesn't* contain a value.
 */
pub
isNone : Option a -> Boolean
isNone =
  case _ of
    Some _ -> false
    None -> true

/**
 * Extracts the value out of this option.
 * *Unsafe*: Will thrown an exception if the Option is empty.
 */
pub
unwrap : Option a -> a
unwrap =
  case _ of
    Some x -> x
    None -> throw AssertionError#new("Empty Option" as Object)

/**
 * Transforms this nullable value into an option.
 * `null` is represented as `None`.
 */
pub
toOption : Nullable a -> Option a
toOption x =
  if x === null
    then None
    else Some (x as a)

/**
 * Transforms this option into an nullable value.
 * This function should only be used to interact with Java methods.
 */
pub
toNullable : Option a -> Nullable a
toNullable =
  case _ of
    Some x -> (x as Nullable a)
    None -> null

/**
 * Transforms a `java.util.Optional` into an option.
 */
pub
fromOptional : Optional a -> Option a
fromOptional (opt : Optional a) = if opt#isPresent() then Some opt#get() else None

/**
 * Transforms an option into a `java.util.Optional`.
 */
pub
toOptional : Option a -> Optional a
toOptional =
  case _ of
    None -> Optional#empty()
    Some x -> Optional#"of"(x)