module novah.option

foreign import type java.util.Optional

foreign import new java.lang.AssertionError(String) as assertErr
foreign import Optional:"of"(Object) as newOptional
foreign import Optional.isPresent()
foreign import Optional:empty()
foreign import Optional.get() as optGet

/**
 * Maps a function over this option if it has a value.
 * Runtime: O(1)
 */
pub
map : (a -> b) -> Option a -> Option b
map f =
  case _ of
    Some x -> Some (f x)
    None -> None

/**
 * Takes a default value, a function and an option
 * and returns the result of the function applied to this option's value
 * or the default value if the option is empty.
 */
pub
maybe : b -> (a -> b) -> Option a -> b
maybe def f =
  case _ of
    Some x -> f x
    None -> def

/**
 * Returns true if this option contains a value.
 */
pub
isSome : Option a -> Boolean
isSome =
  case _ of
    Some _ -> true
    None -> false

/**
 * Returns true if this option *doesn't* contain a value.
 */
pub
isNone : Option a -> Boolean
isNone =
  case _ of
    Some _ -> false
    None -> true

/**
 * Extracts the value out of this option.
 * *Unsafe*: Will thrown an exception if the Option is empty.
 */
pub
unwrap : Option a -> a
unwrap =
  case _ of
    Some x -> x
    None -> throw (assertErr "Empty Option")

/**
 * Transforms a `java.util.Optional` into an option.
 */
pub
fromOptional : Optional a -> Option a
fromOptional opt = if isPresent opt then Some (optGet opt) else None

/**
 * Transforms an option into a `java.util.Optional`.
 */
pub
toOptional : Option a -> Optional a
toOptional =
  case _ of
    None -> empty ()
    Some x -> newOptional x