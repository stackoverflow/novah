module novah.test

foreign import type java.lang.AssertionError
foreign import type java.lang.Exception
foreign import type java.lang.Throwable

foreign import Throwable.printStackTrace()
foreign import new AssertionError(String) as newAssert

import novah.vector (forEach, toArray)
import novah.set as Set
import novah.option as Option

pub
typealias TestFun = Unit -> Unit

/**
 * Represents one or more tests to be run.
 */
pub+
type Suite
  = Test String TestFun
  | Tests String (Vector TestFun)
  | Setup { before : TestFun, after : TestFun, suite : Suite }

/**
 * All possible results for a test suite.
 */
pub+
type TestResult
  = Success
  | Failure
  | Error

/**
 * Runs all given tests and reports the result.
 * Should be called once at the entry function for tests.
 */
pub
runTests : Vector Suite -> TestResult
runTests suites =
  let total = atom 0
  let stats = toArray [0, 0, 0]
  let addStats v =
        aupdate 0 (_ + (v ! 0L)) stats
        aupdate 1 (_ + (v ! 1L)) stats
        aupdate 2 (_ + (v ! 2L)) stats
      
  let runSuite = case _ of
        Test desc fun -> check desc fun |> addStats
        Tests desc funs -> forEach funs (check desc >> addStats)
        Setup {before, after, suite} ->
          try
            before ()
            runSuite suite
          finally after ()

  forEach suites \suite ->
    swap (_ + 1) total
    runSuite suite

  let failures = aget 1 stats
  let errors = aget 2 stats
  println "\nSummary"
  printfln "%s/%s tests passed" [aget 0 stats, deref total]
  printfln "%d failures" [failures]
  printfln "%d errors" [errors]

  case failures, errors of
    0, 0 -> Success
    _, 0 -> Failure
    _, _ -> Error

/**
 * Fails the test if x is not equals y.
 */
pub
shouldBe : {{ Equals a }} -> a -> a -> Unit
shouldBe {{eq}} x y =
  if x == y
    then ()
    else throw newAssert (format "%s is not equals %s" [x, y])

/**
 * Fails the test if x is equals y.
 */
pub
shouldNotBe : {{ Equals a }} -> a -> a -> Unit
shouldNotBe {{eq}} x y =
  if x != y
    then ()
    else throw newAssert (format "%s is equals %s" [x, y])

/**
 * Fails the test if the element is not inside the set.
 */
pub
shouldBeIn : a -> Set a -> Unit
shouldBeIn x set =
  if Set.contains x set
    then ()
    else throw newAssert (format "%s is not inside %s" [toString x, toString set])

/**
 * Fails the test if the element is inside the set.
 */
pub
shouldNotBeIn : a -> Set a -> Unit
shouldNotBeIn x set =
  if not (Set.contains x set)
    then ()
    else throw newAssert (format "%s is inside %s" [toString x, toString set])

/**
 * Fails the test if some element of the vector is not inside the set.
 */
pub
shouldAllBeIn : Vector a -> Set a -> Unit
shouldAllBeIn vec set =
  forEach vec \x ->
    if Set.contains x set
      then ()
      else throw newAssert (format "%s is not inside %s" [toString x, toString set])

/**
 * Fails the test if this option is empty.
 */
pub
shouldBeSome : Option a -> Unit
shouldBeSome opt = case opt of
  Some _ -> ()
  None -> throw newAssert (format "%s is not Some" [opt])

/**
 * Fails the test if this option is not empty.
 */
pub
shouldBeNone : Option a -> Unit
shouldBeNone opt = case opt of
  Some _ -> throw newAssert (format "%s is not None" [opt])
  None -> ()

/**
 * Fails the test if this vector is not empty.
 */
pub
shouldBeEmpty : Vector a -> Unit
shouldBeEmpty vec = case vec of
  [] -> ()
  _ -> throw newAssert (format "vector %s is not empty" [vec])

/**
 * Fails the test if this vector is empty.
 */
pub
shouldNotBeEmpty : Vector a -> Unit
shouldNotBeEmpty vec = case vec of
  [] -> throw newAssert "vector is empty"
  _ -> ()

check : String -> TestFun -> Vector Int
check desc fun =
  try
    println ""
    fun ()
    printfln "âœ“ %s" [desc]
    [1, 0, 0]
  catch
    :? AssertionError as err ->
      printStackTrace (unsafeCast err)
      [0, 1, 0]
    :? Exception as err ->
      printStackTrace (unsafeCast err)
      [0, 0, 1]