/**
 * A lightweight test library.
 * Tests can be either automatically registered
 * with the `test` and `testWith` function
 * and ran with `runAllTests` or `runTestsFor`
 * or manually created with the `Test`, `Tests` and `Setup` constructors
 * and ran with `ranTests`.
 */
module novah.test

foreign import java.lang.AssertionError
foreign import java.lang.Exception
foreign import java.lang.Throwable
foreign import novah.Core

import novah.list (forEach)
import novah.set as Set

pub
typealias TestFun = Unit -> Unit

/**
 * Represents one or more tests to be run.
 */
pub+
type Suite
  = Test String TestFun
  | Tests String (List TestFun)
  | Setup { before : TestFun, after : TestFun, suite : Suite }

/**
 * All possible results for a test suite.
 */
pub+
type TestResult
  = Success
  | Failure
  | Error

allRegisteredtests : List Suite
allRegisteredtests = []#linear()

/**
 * Register a test function.
 */
pub
test : String -> TestFun -> Unit
test description testFun =
  addLast (Test description testFun) allRegisteredtests
  ()

/**
 * Register a test function with a before and after hook.
 */
pub
testWith : TestFun -> TestFun -> String -> TestFun -> Unit
testWith before after description testFun =
  let suite = Setup { before, after, suite: Test description testFun }
  addLast suite allRegisteredtests
  ()

/**
 * Executes the function for every entry in the table.
 * Ex:
 * ```novah
 * withTable
 *   [ { animal: "Cat", sound: "meow" }
 *   , { animal: "Dog", sound: "woof" }
 *   , { animal: "Duck", sound: "quack" }
 *   ]
 *   \{animal, sound} -> makeSound animal `shouldBe` sound
 * ```
 */
pub
withTable : List { | r } -> ({ | r } -> Unit) -> Unit
withTable = forEach

runTests : List Suite -> TestResult
runTests suites =
  let total = atom 0
  let stats = arrayOf [0, 0, 0]
  let addStats v =
    aupdate 0 (_ + (v ! 0L)) stats
    aupdate 1 (_ + (v ! 1L)) stats
    aupdate 2 (_ + (v ! 2L)) stats
      
  let runSuite = case _ of
    Test desc fun -> check desc fun |> addStats
    Tests desc funs -> forEach funs (check desc >> addStats)
    Setup {before, after, suite} ->
      try
        before ()
        runSuite suite
      finally after ()

  forEach suites \suite ->
    swap (_ + 1) total
    runSuite suite

  let failures = aget 1 stats
  let errors = aget 2 stats
  println "\nSummary"
  printfln "%s/%s tests passed" [aget 0 stats, deref total]
  printfln "%d failures" [failures]
  printfln "%d errors" [errors]

  case failures, errors of
    0, 0 -> Success
    _, 0 -> Failure
    _, _ -> Error

/**
 * Run all registered tests.
 * Tests need to be located in a root `test` package.
 */
pub
runAllTests : Unit -> TestResult
runAllTests _ =
  Core#loadAllClasses("test")
  runTests allRegisteredtests

/**
 * Run all registered tests.
 * Modules containing tests will be searched
 * in the given root package.
 */
pub
runTestsFor : String -> TestResult
runTestsFor package =
  Core#loadAllClasses(package)
  runTests allRegisteredtests

/**
 * Fails the test if x is not equals y.
 */
pub
shouldBe : {{ Equals a }} -> a -> a -> Unit
shouldBe {{eq}} x y =
  if x == y
    then ()
    else throw AssertionError#new(format "%s is not equals %s" [x, y] as Object)

/**
 * Fails the test if x is equals y.
 */
pub
shouldNotBe : {{ Equals a }} -> a -> a -> Unit
shouldNotBe {{eq}} x y =
  if x != y
    then ()
    else throw AssertionError#new(format "%s is equals %s" [x, y] as Object)

/**
 * Fails the test if the record r1 is not equals r2.
 */
pub
recordShouldBe : { | r } -> { | r } -> Unit
recordShouldBe r1 r2 =
  if recordEquals r1 r2
    then ()
    else throw AssertionError#new(format "%s is not equals %s" [r1, r2] as Object)

/**
 * Fails the test if the record r1 is equals r2.
 */
pub
recordShouldNotBe : { | r } -> { | r } -> Unit
recordShouldNotBe r1 r2 =
  if not (recordEquals r1 r2)
    then ()
    else throw AssertionError#new(format "%s is equals %s" [r1, r2] as Object)

/**
 * Fails the test if the element is not inside the set.
 */
pub
shouldBeIn : a -> Set a -> Unit
shouldBeIn x set =
  if Set.contains x set
    then ()
    else throw AssertionError#new(format "%s is not inside %s" [toString x, toString set] as Object)

/**
 * Fails the test if the element is inside the set.
 */
pub
shouldNotBeIn : a -> Set a -> Unit
shouldNotBeIn x set =
  if not (Set.contains x set)
    then ()
    else throw AssertionError#new(format "%s is inside %s" [toString x, toString set] as Object)

/**
 * Fails the test if some element of the list is not inside the set.
 */
pub
shouldAllBeIn : List a -> Set a -> Unit
shouldAllBeIn list set =
  forEach list \x ->
    if Set.contains x set
      then ()
      else throw AssertionError#new(format "%s is not inside %s" [toString x, toString set] as Object)

/**
 * Fails the test if this option is empty.
 */
pub
shouldBeSome : Option a -> Unit
shouldBeSome opt =
  case opt of
    Some _ -> ()
    None -> throw AssertionError#new(format "%s is not Some" [opt] as Object)

/**
 * Fails the test if this option is not empty.
 */
pub
shouldBeNone : Option a -> Unit
shouldBeNone opt =
  case opt of
    Some _ -> throw AssertionError#new(format "%s is not None" [opt] as Object)
    None -> ()

/**
 * Fails the test if this list is not empty.
 */
pub
shouldBeEmpty : List a -> Unit
shouldBeEmpty list =
  case list of
    [] -> ()
    _ -> throw AssertionError#new(format "list %s is not empty" [list] as Object)

/**
 * Fails the test if this list is empty.
 */
pub
shouldNotBeEmpty : List a -> Unit
shouldNotBeEmpty list =
  case list of
    [] -> throw AssertionError#new("list is empty" as Object)
    _ -> ()

check : String -> TestFun -> List Int
check desc fun =
  try
    println ""
    fun ()
    printfln "âœ“ %s" [desc]
    [1, 0, 0]
  catch
    :? AssertionError as err ->
      (err as Throwable)#printStackTrace()
      [0, 1, 0]
    :? Exception as err ->
      (err as Throwable)#printStackTrace()
      [0, 0, 1]