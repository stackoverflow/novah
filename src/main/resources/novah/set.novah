module novah.set

foreign import type java.util.stream.Stream
foreign import type java.util.function.BiPredicate
foreign import type java.util.function.ToLongFunction
foreign import type io.lacuna.bifurcan.ISet
foreign import type novah.Core

foreign import get io.lacuna.bifurcan.Maps:DEFAULT_HASH_CODE as defaultHashCode
foreign import ISet.stream() as setStream
foreign import new Set(ToLongFunction, BiPredicate) as newSet
foreign import Set.linear() as setLinear
foreign import Set.forked() as setForked
foreign import Set.add(Object) as setAdd
foreign import Set.remove(Object) as setRemove
foreign import Set.nth(Int64) as setNth
foreign import Set.contains(Object) as setContains
foreign import Set.union(ISet) as sunion
foreign import Set.difference(ISet) as sdifference
foreign import Set.intersection(ISet) as sintersection
foreign import Set.size() as sizeSet
foreign import Core:foldSet(Function, Object, Set)
foreign import Core:setEvery(Function, Set)

import novah.stream as S
import novah.java as J
import novah.option as Option
import novah.list as List

/**
 * Creates a new set which uses the element equality function and the provided hash function, or the default object hash function.
 * This function should always be used to create new sets for types that have equality implementations that differ from its own
 * `equals` function.
 * Note that Novah creates default, sensible `equals` and `hashCode` implementations for every type, so this function is only needed
 * for types where the `equals` function and the `Equals` type class implementation diverge.
 */
pub
new : {{ Equals a }} -> Option (a -> Int64) -> Set a
new {{Equals eq}} hashFn =
  let hash = Option.map J.toLong hashFn ?: defaultHashCode
  newSet hash (J.bipredicate eq.equals)

/**
 * Inserts this element in the set.
 * Runtime: ~O(1)
 */
pub
add : a -> Set a -> Set a
add x set = setAdd set x

/**
 * Removes this element from the set.
 * Runtime: ~O(1)
 */
pub
remove : a -> Set a -> Set a
remove x set = setRemove set x

/**
 * Returns the size of this set.
 * Runtime: O(1)
 */
pub
size : Set a -> Int64
size set = sizeSet set

/**
 * Returns true if this set is empty.
 */
pub
isEmpty : Set a -> Boolean
isEmpty set = sizeSet set == 0L

/**
 * Returns true if this set is not empty.
 * Runtime: O(1)
 */
pub
isNotEmpty : Set a -> Boolean
isNotEmpty set = sizeSet set != 0L

/**
 * Returns some value at index for this set if it exists or none.
 * Runtime: ~O(1)
 */
pub
nth : Int64 -> Set a -> Option a
nth index set =
  let len = sizeSet set
  if index < 0L || index >= len
    then None
    else Some (setNth set index)

/**
 * Returns the value at index for this set.
 * *Unsafe*: Will thrown a `java.lang.IndexOutOfBoundsException` if the index doesn't exist.
 * Runtime: ~O(1)
 */
pub
unsafeNth : Int64 -> Set a -> a
unsafeNth index set = setNth set index

/**
 * Returns the union of these 2 sets.
 * This is the same as `set1 ++ set2`.
 */
pub
union : Set a -> Set a -> Set a
union s1 s2 = sunion s1 (s2 as ISet a)

/**
 * Returns all elements in set 1 that are not in set 2.
 */
pub
difference : Set a -> Set a -> Set a
difference s1 s2 = sdifference s1 (s2 as ISet a)

/**
 * Returns the intersection between these 2 sets.
 */
pub
intersection : Set a -> Set a -> Set a
intersection s1 s2 = sintersection s1 (s2 as ISet a)

/**
 * Returns a stream for this set.
 */
pub
stream : Set a -> Stream a
stream set = setStream (set as ISet a)

/**
 * Collects this stream into a set.
 * Runtime: O(n)
 */
pub
fromStream : Stream a -> Set a
fromStream st =
  let lset = setLinear #{}
  S.forEach st \x -> add x lset
  setForked lset

/**
 * Runs function f for every element of this set, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : Set a -> (a -> Unit) -> Unit
forEach set f =
  forEachRange 0L (sizeSet set) \idx ->
    f (setNth set idx)

/**
 * Maps function f over all elements of this set
 * returning a set of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> Set a -> Set b
map f set =
  let lset = setLinear #{}
  forEachRange 0L (sizeSet set) \idx ->
    add (f (setNth set idx)) lset
  setForked lset

/**
 * Returns an array of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> Set a -> Set a
filter pred set =
  let lset = setLinear #{}
  forEachRange 0L (sizeSet set) \idx ->
    let elem = setNth set idx
    when (pred elem) \_ ->
      add elem lset
  setForked lset

/**
 * Returns the first occurrence of elem in the set for which the predicate returns true.
 * This function uses the set's equality function, set at creation time.
 * Runtime: O(n)
 */
pub
find : (a -> Boolean) -> Set a -> Option a
find pred set =
  let lset = setLinear #{}
  forEachBreak 0L (sizeSet set) \idx ->
    let elem = setNth set idx
    if pred elem
      then
        add elem lset
        -1
      else 0
  nth 0L lset

/**
 * Returns true if the element is inside the set.
 * This function uses the set's equality function, set at creation time.
 * Runtime: ~O(1)
 */
pub
contains : a -> Set a -> Boolean
contains elem set = setContains set elem

/**
 * Reduces this set to a single value according to the reducing function.
 * Goes from the left to the right.
 * Runtime: O(n)
 */
pub
foldl : (b -> a -> b) -> b -> Set a -> b
foldl f init set = foldSet f init set

/**
 * A specialized version of `foldl` where the first element of the set is used as initial value.
 * Returns none if the set is empty
 * Runtime: O(n)
 */
pub
reduce : (a -> a -> a) -> Set a -> Option a
reduce f set =
  if isEmpty set
    then None
    else
      let first = setNth set 0L
      let rest = remove first set
      Some (foldl f first rest)

/**
 * Flattens a set of sets into a single set by concatenating them together.
 * Runtime: O(n)
 */
pub
flatten : Set (Set a) -> Set a
flatten sets =
  if isEmpty sets
    then #{}
    else
      let first = setNth sets 0L
      let ssets = remove first sets
      foldl (\s1 s2 -> s1 ++ s2) first ssets

/**
 * Like map, but the mapping function should return a set.
 * Flattens the result.
 * Runtime: O(n)
 */
pub
flatMap : (a -> Set b) -> Set a -> Set b
flatMap f set = flatten (map f set)

/**
 * Returns true if the predicate is true for every element in this set.
 * Runtime: O(n)
 */
pub
every : (a -> Boolean) -> Set a -> Boolean
every pred set = setEvery pred set

/**
 * Returns true if every element in the list is contained in the set.
 */
pub
containsAll : List a -> Set a -> Boolean
containsAll list set = List.every (\x -> contains x set) list

/**
 * Creates a linear (mutable) version of the given set and applies the function to it.
 * Returns a forked (persistent) version of the returned linear set.
 * This function should be used when lots of expensive mutating operations have to be run on a set
 * and can be seen as a builder for the resulting set.
 * All functions that alter sets like `add`, `remove`, etc.
 * will mutate a linear set.
 * Ex:
 *   withLinear #{1, 2, 3} \set ->
 *     add 4 set
 *     remove 1 set
 *
 *   -> #{2, 3, 4}
 */
pub
withLinear : Set a -> (Set a -> Set a) -> Set a
withLinear set f = setForked (f (setLinear set))