module novah.stream

foreign import type java.util.function.Consumer
foreign import type java.util.function.Predicate
foreign import type java.util.function.BinaryOperator
foreign import type java.util.stream.Stream
foreign import type novah.Core

foreign import Stream.forEach(Consumer) as sforEach
foreign import Stream.count() as scount
foreign import Stream.toArray() as stoArray
foreign import Stream.map(Function) as smap
foreign import Stream.flatMap(Function) as sflatMap
foreign import Stream.filter(Predicate) as sfilter
foreign import Stream.limit(Int64) as slimit
foreign import Stream.skip(Int64) as sskip
foreign import Stream.takeWhile(Predicate) as stakeWhile
foreign import Stream.dropWhile(Predicate) as sdropWhile
foreign import Stream.reduce(BinaryOperator) as sreduce
foreign import Stream.reduce(Object, BinaryOperator) as sreduce2
foreign import Stream:"of"(Object) as streamOf
foreign import Stream:empty() as streamEmpty
foreign import Core:makeConsumer(Function)
foreign import Core:makePredicate(Function)
foreign import Core:makeBinaryOperator(Function)

import novah.option as O

/**
 * Creates a new empty stream.
 */
pub
empty : Unit -> Stream a
empty _ = streamEmpty ()

/**
 * Creates a stream with a single element.
 */
pub
from : a -> Stream a
from x = streamOf x

/**
 * Runs function f for every element of this Stream, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : Stream a -> (a -> b) -> Unit
forEach stream f = sforEach stream (unsafeCast (makeConsumer f))

/**
 * Collects this Stream into an Array.
 */
pub
toArray : Stream a -> Array a
toArray st = unsafeCast (stoArray st)

pub instance
countStream : Count (Stream a)
countStream = Count { count: \st -> scount st }

/**
 * Returns a stream of the elements that match the given predicate.
 */
pub
filter : (a -> Boolean) -> Stream a -> Stream a
filter f st = sfilter st (unsafeCast (makePredicate f))

/**
 * Maps function f over all elements of this Stream returning a Stream.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> Stream a -> Stream b
map f st = smap st (unsafeCast f)

/**
 * Like `map` but it will flatten the resulting stream.
 */
pub
flatMap : (a -> Stream b) -> Stream a -> Stream b
flatMap f st = sflatMap st (unsafeCast f)

/**
 * Returns a new stream with a limited number of elements.
 */
pub
limit : Int64 -> Stream a -> Stream a
limit lim st = slimit st lim

/**
 * Returns a stream with the first n elements skipped.
 */
pub
skip : Int64 -> Stream a -> Stream a
skip n st = sskip st n

/**
 * Takes elements from this stream while the predicates holds.
 */
pub
takeWhile : (a -> Boolean) -> Stream a -> Stream a
takeWhile pred st = stakeWhile st (unsafeCast (makePredicate pred))

/**
 * Drops elements from this stream while the predicates holds.
 */
pub
dropWhile : (a -> Boolean) -> Stream a -> Stream a
dropWhile pred st = sdropWhile st (unsafeCast (makePredicate pred))

/**
 * Reduces this stream to a single value according to the reducing function.
 */
pub
reduce : (a -> a -> a) -> Stream a -> Option a
reduce f st = sreduce st (makeBinaryOperator f) |> O.fromOptional

/**
 * Reduces this stream to a single value according to the reducing function.
 */
pub
reduceInit : (a -> a -> a) -> a -> Stream a -> a
reduceInit f init st = sreduce2 st init (makeBinaryOperator f)