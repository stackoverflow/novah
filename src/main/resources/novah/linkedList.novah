module novah.linkedList

/**
 * An immutable linked list.
 * A List should almost always be prefered over this type as lists make for good linked lists.
 * Most linked list operations are O(n) like `size`.
 */
pub+
type LinkedList a = Nil | Cons a (LinkedList a)

/**
 * Appends the element as the new head of the linked list.
 * An alias to the Cons constructor of a linked list.
 */
pub
(::) : a -> LinkedList a -> LinkedList a
(::) = Cons

/**
 * Returns the head of this linked list if it's not empty.
 * Runtime: O(1)
 */
pub
head : LinkedList a -> Option a
head = case _ of
  Nil -> None
  Cons x _ -> Some x

/**
 * Returns the tail of this linked list if it's not empty.
 * Runtime: O(1)
 */
pub
tail : LinkedList a -> Option (LinkedList a)
tail = case _ of
  Nil -> None
  Cons _ xs -> Some xs

/**
 * Produces a linked list with a single element.
 * Runtime: O(1)
 */
pub
singleton : a -> LinkedList a
singleton x = x :: Nil

/**
 * Takes the first n elements of this linked list and returns it.
 * Runtime: O(n)
 */
pub
take : Int32 -> LinkedList a -> LinkedList a
take n = case _ of
  Nil -> Nil
  _ if n <= 0 -> Nil
  Cons x xs -> x :: take (n - 1) xs

/**
 * Drops the first n elements of this linked list and returns it.
 * Runtime: O(n)
 */
pub
drop : Int32 -> LinkedList a -> LinkedList a
drop n = case _ of
  Nil -> Nil
  l if n <= 0 -> l
  Cons _ xs -> drop (n - 1) xs

/**
 * Returns some value at index for this linked list if it exists or none.
 * Runtime: O(n)
 */
pub
nth : Int32 -> LinkedList a -> Option a
nth index = drop index >> head

/**
 * Keeps taking elements of this linked list while the predicate holds.
 * Runtime: O(n)
 */
pub
takeWhile : (a -> Boolean) -> LinkedList a -> LinkedList a
takeWhile pred = case _ of
  Nil -> Nil
  (Cons x xs) if pred x -> x :: takeWhile pred xs
  _ -> Nil

/**
 * Keeps removing elements from this linked list while the predicate holds.
 * Runtime: O(n)
 */
pub
dropWhile : (a -> Boolean) -> LinkedList a -> LinkedList a
dropWhile pred = case _ of
  Nil -> Nil
  (Cons x xs) if pred x -> dropWhile pred xs
  l -> l

/**
 * Returns true if this linked list is empty.
 * Runtime: O(1)
 */
pub
isEmpty : LinkedList a -> Boolean
isEmpty = case _ of
  Nil -> true
  _ -> false

/**
 * Returns true if this linked list is not empty.
 * Runtime: O(1)
 */
pub
isNotEmpty : LinkedList a -> Boolean
isNotEmpty = case _ of
  Nil -> false
  _ -> true

/**
 * Returns true if the element is inside this linked list.
 * Runtime: O(n)
 */
pub
contains : {{ Equals a }} -> a -> LinkedList a -> Boolean
contains {{eq}} elem = case _ of
  Nil -> false
  Cons x xs -> if x == elem then true else contains {{eq}} elem xs

/**
 * Maps function f over all elements of this linked list
 * returning a linked list of the same size.
 * Runtime: O(n)
 */
pub
map : (a -> b) -> LinkedList a -> LinkedList b
map f = case _ of
  Nil -> Nil
  Cons x xs -> f x :: map f xs

/**
 * Runs function f for every element of this linked list, ignoring the result.
 * Runtime: O(n)
 */
pub
forEach : LinkedList a -> (a -> b) -> Unit
forEach list f =
  case list of
    Nil -> ()
    Cons x xs ->
      f x
      forEach xs f

/**
 * Returns a linked list of the elements that match the given predicate.
 * Runtime: O(n)
 */
pub
filter : (a -> Boolean) -> LinkedList a -> LinkedList a
filter f = case _ of
  Nil -> Nil
  Cons x xs -> if f x then x :: filter f xs else filter f xs

/**
 * Returns the first occurrence of elem in this linked list for which the predicate returns true.
 * Runtime: O(n)
 */
pub
find : (a -> Boolean) -> LinkedList a -> Option a
find pred = case _ of
  Nil -> None
  Cons x xs -> if pred x then Some x else find pred xs

/**
 * Like `map` but it will flatten the resulting linked list.
 * Runtime: O(n)
 */
pub
flatMap : (a -> LinkedList b) -> LinkedList a -> LinkedList b
flatMap f = case _ of
  Nil -> Nil
  Cons x xs -> f x ++ flatMap f xs

/**
 * Returns the size of this linked list.
 * Runtime: O(n)
 */
pub
size : LinkedList a -> Int32
size = case _ of
  Nil -> 0
  Cons _ xs -> 1 + (size xs)

showLinkedList_ : Show a -> LinkedList a -> String
showLinkedList_ (Show s) l =
  let innerShow = case _ of
        Nil -> "Nil"
        Cons x xs -> s.show x ++ " :: " ++ innerShow xs
  case l of
    Nil -> "Nil"
    (Cons _ _) as list -> "(" ++ innerShow list ++ ")"

pub instance
showLinkedList : {{ Show a }} -> Show (LinkedList a)
showLinkedList {{s}} = Show { show: showLinkedList_ s }

eqLinkedList_ : Equals a -> LinkedList a -> LinkedList a -> Boolean
eqLinkedList_ ((Equals eq) as equals) = case _, _ of
  Nil, Nil -> true
  Nil, _ -> false
  _, Nil -> false
  Cons x xs, Cons y ys -> eq.equals x y && eqLinkedList_ equals xs ys

pub instance
eqLinkedList : {{ Equals a }} -> Equals (LinkedList a)
eqLinkedList {{eq}} = Equals { equals: eqLinkedList_ eq }

concatLinkedList_ : LinkedList a -> LinkedList a -> LinkedList a
concatLinkedList_ l1 l2 =
  let addTo to = case _ of
        Nil -> to
        Cons x xs -> addTo (x :: to) xs
  addTo Nil l1 |> addTo l2

pub instance
concatLinkedList : Concat (LinkedList a)
concatLinkedList = Concat { concat: concatLinkedList_ }

/**
 * Returns a reversed version of this linked list.
 * Runtime: O(n)
 */
pub
reverse : LinkedList a -> LinkedList a
reverse list =
  let addTo to = case _ of
        Nil -> to
        Cons x xs -> addTo (x :: to) xs
  addTo Nil list

/**
 * Reduces this linked list to a single value according to the reducing function.
 * Goes from the left to the right.
 * Runtime: O(n)
 */
pub
foldl : (b -> a -> b) -> b -> LinkedList a -> b
foldl f =
  let go b = case _ of
        Nil -> b
        Cons x xs -> go (f b x) xs
  go

/**
 * Reduces this linked list to a single value according to the reducing function.
 * Goes from the right to the left.
 * Runtime: O(n)
 */
pub
foldr : (a -> b -> b) -> b -> LinkedList a -> b
foldr f init = foldl (flip f) init << reverse

/**
 * Flattens a linked list of linked lists into a single linked list by concatenating them together.
 * Runtime: O(n)
 */
pub
flatten : LinkedList (LinkedList a) -> LinkedList a
flatten = case _ of
  Nil -> Nil
  Cons x xs -> x ++ flatten xs

/**
 * A specialized version of `foldl` where the first element of the linked list is used as initial value.
 * Returns none if the linked list is empty
 * Runtime: O(n)
 */
pub
reduce : (a -> a -> a) -> LinkedList a -> Option a
reduce f = case _ of
  Nil -> None
  Cons x xs -> Some (foldl f x xs)

/**
 * Returns a linked list in the range from begin (inclusive) to end (exclusive).
 * Runtime: O(n)
 */
pub
range : Int32 -> Int32 -> LinkedList Int32
range begin end =
  let op = if begin <= end then (_ + 1) else (_ - 1)
  let go b e acc =
    if b == e then
      acc
    else
      go (op b) e (b :: acc)
  go begin end Nil |> reverse

/**
 * Creates a linked list with the same elements as the given list.
 * Runtime: O(n)
 */
pub
fromList : List a -> LinkedList a
fromList = case _ of
  [] -> Nil
  [x :: xs] -> x :: fromList xs

// sort implementation copied from https://hackage.haskell.org/package/base-4.15.0.0/docs/src/Data-OldList.html#sort

/**
 * Sorts this linked list according to the comparing function.
 * Runtime: O(n log(n))
 */
pub
sortBy : (a -> a -> Ordering) -> LinkedList a -> LinkedList a
sortBy cmp =
  let sequences ascending descending = case _ of
    Cons a (Cons b xs) ->
      if a `cmp` b == GT then
        descending ascending b (singleton a) xs
      else
        ascending b (a :: _) xs
    xs -> singleton xs
  
  let descending ascending x xs = case _ of
    Cons b bs if x `cmp` b == GT -> descending ascending b (x :: xs) bs
    bs -> (x :: xs) :: sequences ascending descending bs
  
  let ascending x xs = case _ of
    Cons b bs if x `cmp` b != GT -> ascending b (\ys -> xs (x :: ys)) bs
    bs -> (singleton x |> xs) :: sequences ascending descending bs
  
  let merge = case _, _ of
    (Cons x xss) as xs, (Cons y yss) as ys ->
      if x `cmp` y == GT then
        y :: merge xs yss
      else
        x :: merge xss ys
    Nil, ys -> ys
    xs, Nil -> xs

  let mergePairs = case _ of
    Cons a (Cons b xs) -> merge a b :: mergePairs xs
    xs -> xs

  let mergeAll = case _ of
    Cons x Nil -> x
    xs -> mergeAll (mergePairs xs)
  
  mergeAll << (sequences ascending descending)

/**
 * Sorts this linked list according to the element's Ord instance.
 * Runtime: O(n log(n))
 */
pub
sort : {{ Ord a }} -> LinkedList a -> LinkedList a
sort {{Ord _ ord}} = sortBy ord.compare