module novah.string

foreign import type java.lang.CharSequence

/**
 * Returns true if this string is empty or only contains whitespace codepoints.
 */
pub
isBlank : String -> Boolean
isBlank s = (s : String)#isBlank()

/**
 * Returns true if this string is empty.
 */
pub
isEmpty : String -> Boolean
isEmpty s = (s : String)#isEmpty()

/**
 * Returns the size of this string.
 */
pub
size : String -> Int32
size s = (s : String)#length()

/**
 * Returns a lower case version of this string.
 */
pub
lowerCase : String -> String
lowerCase str = (str : String)#toLowerCase()

/**
 * Returns a upper case version of this string.
 */
pub
upperCase : String -> String
upperCase str = (str : String)#toUpperCase()

/**
 * Returns true if this string starts with prefix.
 */
pub
startsWith : String -> String -> Boolean
startsWith prefix str = (str : String)#startsWith(prefix)

/**
 * Returns true if this string ends with suffix.
 */
pub
endsWith : String -> String -> Boolean
endsWith suffix str = (str : String)#endsWith(suffix)

/**
 * Returns true if this string contains the string represented by another.
 */
pub
contains : String -> String -> Boolean
contains another str = (str : String)#contains(another as CharSequence)

/**
 * Returns true if this string contains the character.
 */
pub
containsChar : Char -> String -> Boolean
containsChar char str = (str : String)#contains(toString char as CharSequence)

/**
 * Encodes this string into an array of bytes using the platform's default charset.
 */
pub
getBytes : String -> Array Byte
getBytes str = (str : String)#getBytes()

/**
 * Joins all strings in this list separated by delimiter.
 */
pub
join : String -> List String -> String
join delimiter list = String#join(delimiter as CharSequence, arrayOf list as Array CharSequence)

/**
 * Returns this string with all leading and trailing white spaces removed.
 */
pub
strip : String -> String
strip str = (str : String)#strip()

/**
 * Returns this string with all leading white spaces removed.
 */
pub
stripl : String -> String
stripl str = (str : String)#stripLeading()

/**
 * Returns this string with all trailing white spaces removed.
 */
pub
stript : String -> String
stript str = (str : String)#stripTrailing()

/**
 * Returns a string that represents the input string repeated n times.
 */
pub
repeat : Int32 -> String -> String
repeat n str = (str : String)#repeat(n)

/**
 * Returns this string with the first character converted to upper-case and the rest converted to lower-case.
 */
pub
capitalize : String -> String
capitalize str =
  case (str : String)#length() of
    0 -> str
    1 -> str#toUpperCase()
    _ ->
      let head = (toString str#charAt(0))#toUpperCase()
      let tail = str#substring(1)#toLowerCase()
      format "%s%s" [head, tail]

/**
 * Split this string at new lines.
 */
pub
splitLines : String -> List String
splitLines str = List#"of"((str : String)#split("[\\r|\\n]+"))

/**
 * Returns the character at the specified index if it exists.
 */
pub
charAt : Int32 -> String -> Option Char
charAt idx str =
  if idx < (str : String)#length()
    then Some str#charAt(idx)
    else None