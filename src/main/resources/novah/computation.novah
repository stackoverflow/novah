/**
 * This module defines computation expressions
 * for some types like List and Option.
 */
module novah.computation

import novah.linkedList (LinkedList(..))
import novah.linkedList as LinkedList
import novah.set as Set
import novah.list as List

/**
 * The builder for list computation expressions.
 * Allows to use `do.list` syntax for list comprehensions.
 */
pub
list :
  { bind : List a -> (a -> List b) -> List b
  , pure : c -> List c
  , zero : List d
  }
list =
  { bind: flip List.flatMap
  , pure: \x -> [x]
  , zero: []
  }

/**
 * The builder for set computation expressions.
 * Allows to use `do.set` syntax for set comprehensions.
 */
pub
set :
  { bind : Set a -> (a -> Set b) -> Set b
  , pure : c -> Set c
  , zero : Set d
  }
set =
  { bind: flip Set.flatMap
  , pure: \x -> #{x}
  , zero: #{}
  }

/**
 * The builder for linked list computation expressions.
 * Allows to use `do.linkedList` syntax for linked list comprehensions.
 */
pub
linkedList :
  { bind : LinkedList a -> (a -> LinkedList b) -> LinkedList b
  , pure : c -> LinkedList c
  , zero : LinkedList d
  }
linkedList =
  { bind: flip LinkedList.flatMap
  , pure: \x -> Cons x Nil
  , zero: Nil
  }

/**
 * The builder for optional computation expressions.
 * Allows to use `do.option` syntax for option workflows.
 */
pub
option :
  { bind : Option a -> (a -> Option b) -> Option b
  , pure : c -> Option c
  , zero : Option d
  }
option =
  { bind: optBind
  , pure: Some
  , zero: None
  }

/**
 * The builder for success/error computation expressions.
 * Allows to use `do.result` syntax for failable workflows.
 */
pub
result :
  { bind : Result a e -> (a -> Result b e) -> Result b e
  , pure : c -> Result c f
  }
result =
  { bind: resultBind
  , pure: Ok
  }

optBind : Option a -> (a -> Option b) -> Option b
optBind opt f =
  case opt of
    Some x -> f x
    None -> None

resultBind : Result a err -> (a -> Result b err) -> Result b err
resultBind res f =
  case res of
    Ok x -> f x
    Err e -> Err e